
SPI_MASTER_10MHz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000379c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800385c  0800385c  0001385c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038d4  080038d4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080038d4  080038d4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038d4  080038d4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038d4  080038d4  000138d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038d8  080038d8  000138d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080038dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000010  080038ec  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  080038ec  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2cb  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e8b  00000000  00000000  0002f303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00031190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00031f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010bf4  00000000  00000000  00032cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010294  00000000  00000000  000438ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067742  00000000  00000000  00053b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bb282  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000333c  00000000  00000000  000bb2d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003844 	.word	0x08003844

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003844 	.word	0x08003844

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_dmul>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	464e      	mov	r6, r9
 8000226:	4645      	mov	r5, r8
 8000228:	46de      	mov	lr, fp
 800022a:	b5e0      	push	{r5, r6, r7, lr}
 800022c:	4698      	mov	r8, r3
 800022e:	030c      	lsls	r4, r1, #12
 8000230:	004b      	lsls	r3, r1, #1
 8000232:	0006      	movs	r6, r0
 8000234:	4692      	mov	sl, r2
 8000236:	b087      	sub	sp, #28
 8000238:	0b24      	lsrs	r4, r4, #12
 800023a:	0d5b      	lsrs	r3, r3, #21
 800023c:	0fcf      	lsrs	r7, r1, #31
 800023e:	2b00      	cmp	r3, #0
 8000240:	d100      	bne.n	8000244 <__aeabi_dmul+0x24>
 8000242:	e15c      	b.n	80004fe <__aeabi_dmul+0x2de>
 8000244:	4ad9      	ldr	r2, [pc, #868]	; (80005ac <__aeabi_dmul+0x38c>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d100      	bne.n	800024c <__aeabi_dmul+0x2c>
 800024a:	e175      	b.n	8000538 <__aeabi_dmul+0x318>
 800024c:	0f42      	lsrs	r2, r0, #29
 800024e:	00e4      	lsls	r4, r4, #3
 8000250:	4314      	orrs	r4, r2
 8000252:	2280      	movs	r2, #128	; 0x80
 8000254:	0412      	lsls	r2, r2, #16
 8000256:	4314      	orrs	r4, r2
 8000258:	4ad5      	ldr	r2, [pc, #852]	; (80005b0 <__aeabi_dmul+0x390>)
 800025a:	00c5      	lsls	r5, r0, #3
 800025c:	4694      	mov	ip, r2
 800025e:	4463      	add	r3, ip
 8000260:	9300      	str	r3, [sp, #0]
 8000262:	2300      	movs	r3, #0
 8000264:	4699      	mov	r9, r3
 8000266:	469b      	mov	fp, r3
 8000268:	4643      	mov	r3, r8
 800026a:	4642      	mov	r2, r8
 800026c:	031e      	lsls	r6, r3, #12
 800026e:	0fd2      	lsrs	r2, r2, #31
 8000270:	005b      	lsls	r3, r3, #1
 8000272:	4650      	mov	r0, sl
 8000274:	4690      	mov	r8, r2
 8000276:	0b36      	lsrs	r6, r6, #12
 8000278:	0d5b      	lsrs	r3, r3, #21
 800027a:	d100      	bne.n	800027e <__aeabi_dmul+0x5e>
 800027c:	e120      	b.n	80004c0 <__aeabi_dmul+0x2a0>
 800027e:	4acb      	ldr	r2, [pc, #812]	; (80005ac <__aeabi_dmul+0x38c>)
 8000280:	4293      	cmp	r3, r2
 8000282:	d100      	bne.n	8000286 <__aeabi_dmul+0x66>
 8000284:	e162      	b.n	800054c <__aeabi_dmul+0x32c>
 8000286:	49ca      	ldr	r1, [pc, #808]	; (80005b0 <__aeabi_dmul+0x390>)
 8000288:	0f42      	lsrs	r2, r0, #29
 800028a:	468c      	mov	ip, r1
 800028c:	9900      	ldr	r1, [sp, #0]
 800028e:	4463      	add	r3, ip
 8000290:	00f6      	lsls	r6, r6, #3
 8000292:	468c      	mov	ip, r1
 8000294:	4316      	orrs	r6, r2
 8000296:	2280      	movs	r2, #128	; 0x80
 8000298:	449c      	add	ip, r3
 800029a:	0412      	lsls	r2, r2, #16
 800029c:	4663      	mov	r3, ip
 800029e:	4316      	orrs	r6, r2
 80002a0:	00c2      	lsls	r2, r0, #3
 80002a2:	2000      	movs	r0, #0
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	9900      	ldr	r1, [sp, #0]
 80002a8:	4643      	mov	r3, r8
 80002aa:	3101      	adds	r1, #1
 80002ac:	468c      	mov	ip, r1
 80002ae:	4649      	mov	r1, r9
 80002b0:	407b      	eors	r3, r7
 80002b2:	9301      	str	r3, [sp, #4]
 80002b4:	290f      	cmp	r1, #15
 80002b6:	d826      	bhi.n	8000306 <__aeabi_dmul+0xe6>
 80002b8:	4bbe      	ldr	r3, [pc, #760]	; (80005b4 <__aeabi_dmul+0x394>)
 80002ba:	0089      	lsls	r1, r1, #2
 80002bc:	5859      	ldr	r1, [r3, r1]
 80002be:	468f      	mov	pc, r1
 80002c0:	4643      	mov	r3, r8
 80002c2:	9301      	str	r3, [sp, #4]
 80002c4:	0034      	movs	r4, r6
 80002c6:	0015      	movs	r5, r2
 80002c8:	4683      	mov	fp, r0
 80002ca:	465b      	mov	r3, fp
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	d016      	beq.n	80002fe <__aeabi_dmul+0xde>
 80002d0:	2b03      	cmp	r3, #3
 80002d2:	d100      	bne.n	80002d6 <__aeabi_dmul+0xb6>
 80002d4:	e203      	b.n	80006de <__aeabi_dmul+0x4be>
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d000      	beq.n	80002dc <__aeabi_dmul+0xbc>
 80002da:	e0cd      	b.n	8000478 <__aeabi_dmul+0x258>
 80002dc:	2200      	movs	r2, #0
 80002de:	2400      	movs	r4, #0
 80002e0:	2500      	movs	r5, #0
 80002e2:	9b01      	ldr	r3, [sp, #4]
 80002e4:	0512      	lsls	r2, r2, #20
 80002e6:	4322      	orrs	r2, r4
 80002e8:	07db      	lsls	r3, r3, #31
 80002ea:	431a      	orrs	r2, r3
 80002ec:	0028      	movs	r0, r5
 80002ee:	0011      	movs	r1, r2
 80002f0:	b007      	add	sp, #28
 80002f2:	bcf0      	pop	{r4, r5, r6, r7}
 80002f4:	46bb      	mov	fp, r7
 80002f6:	46b2      	mov	sl, r6
 80002f8:	46a9      	mov	r9, r5
 80002fa:	46a0      	mov	r8, r4
 80002fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fe:	2400      	movs	r4, #0
 8000300:	2500      	movs	r5, #0
 8000302:	4aaa      	ldr	r2, [pc, #680]	; (80005ac <__aeabi_dmul+0x38c>)
 8000304:	e7ed      	b.n	80002e2 <__aeabi_dmul+0xc2>
 8000306:	0c28      	lsrs	r0, r5, #16
 8000308:	042d      	lsls	r5, r5, #16
 800030a:	0c2d      	lsrs	r5, r5, #16
 800030c:	002b      	movs	r3, r5
 800030e:	0c11      	lsrs	r1, r2, #16
 8000310:	0412      	lsls	r2, r2, #16
 8000312:	0c12      	lsrs	r2, r2, #16
 8000314:	4353      	muls	r3, r2
 8000316:	4698      	mov	r8, r3
 8000318:	0013      	movs	r3, r2
 800031a:	002f      	movs	r7, r5
 800031c:	4343      	muls	r3, r0
 800031e:	4699      	mov	r9, r3
 8000320:	434f      	muls	r7, r1
 8000322:	444f      	add	r7, r9
 8000324:	46bb      	mov	fp, r7
 8000326:	4647      	mov	r7, r8
 8000328:	000b      	movs	r3, r1
 800032a:	0c3f      	lsrs	r7, r7, #16
 800032c:	46ba      	mov	sl, r7
 800032e:	4343      	muls	r3, r0
 8000330:	44da      	add	sl, fp
 8000332:	9302      	str	r3, [sp, #8]
 8000334:	45d1      	cmp	r9, sl
 8000336:	d904      	bls.n	8000342 <__aeabi_dmul+0x122>
 8000338:	2780      	movs	r7, #128	; 0x80
 800033a:	027f      	lsls	r7, r7, #9
 800033c:	46b9      	mov	r9, r7
 800033e:	444b      	add	r3, r9
 8000340:	9302      	str	r3, [sp, #8]
 8000342:	4653      	mov	r3, sl
 8000344:	0c1b      	lsrs	r3, r3, #16
 8000346:	469b      	mov	fp, r3
 8000348:	4653      	mov	r3, sl
 800034a:	041f      	lsls	r7, r3, #16
 800034c:	4643      	mov	r3, r8
 800034e:	041b      	lsls	r3, r3, #16
 8000350:	0c1b      	lsrs	r3, r3, #16
 8000352:	4698      	mov	r8, r3
 8000354:	003b      	movs	r3, r7
 8000356:	4443      	add	r3, r8
 8000358:	9304      	str	r3, [sp, #16]
 800035a:	0c33      	lsrs	r3, r6, #16
 800035c:	0436      	lsls	r6, r6, #16
 800035e:	0c36      	lsrs	r6, r6, #16
 8000360:	4698      	mov	r8, r3
 8000362:	0033      	movs	r3, r6
 8000364:	4343      	muls	r3, r0
 8000366:	4699      	mov	r9, r3
 8000368:	4643      	mov	r3, r8
 800036a:	4343      	muls	r3, r0
 800036c:	002f      	movs	r7, r5
 800036e:	469a      	mov	sl, r3
 8000370:	4643      	mov	r3, r8
 8000372:	4377      	muls	r7, r6
 8000374:	435d      	muls	r5, r3
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	444d      	add	r5, r9
 800037a:	1945      	adds	r5, r0, r5
 800037c:	45a9      	cmp	r9, r5
 800037e:	d903      	bls.n	8000388 <__aeabi_dmul+0x168>
 8000380:	2380      	movs	r3, #128	; 0x80
 8000382:	025b      	lsls	r3, r3, #9
 8000384:	4699      	mov	r9, r3
 8000386:	44ca      	add	sl, r9
 8000388:	043f      	lsls	r7, r7, #16
 800038a:	0c28      	lsrs	r0, r5, #16
 800038c:	0c3f      	lsrs	r7, r7, #16
 800038e:	042d      	lsls	r5, r5, #16
 8000390:	19ed      	adds	r5, r5, r7
 8000392:	0c27      	lsrs	r7, r4, #16
 8000394:	0424      	lsls	r4, r4, #16
 8000396:	0c24      	lsrs	r4, r4, #16
 8000398:	0003      	movs	r3, r0
 800039a:	0020      	movs	r0, r4
 800039c:	4350      	muls	r0, r2
 800039e:	437a      	muls	r2, r7
 80003a0:	4691      	mov	r9, r2
 80003a2:	003a      	movs	r2, r7
 80003a4:	4453      	add	r3, sl
 80003a6:	9305      	str	r3, [sp, #20]
 80003a8:	0c03      	lsrs	r3, r0, #16
 80003aa:	469a      	mov	sl, r3
 80003ac:	434a      	muls	r2, r1
 80003ae:	4361      	muls	r1, r4
 80003b0:	4449      	add	r1, r9
 80003b2:	4451      	add	r1, sl
 80003b4:	44ab      	add	fp, r5
 80003b6:	4589      	cmp	r9, r1
 80003b8:	d903      	bls.n	80003c2 <__aeabi_dmul+0x1a2>
 80003ba:	2380      	movs	r3, #128	; 0x80
 80003bc:	025b      	lsls	r3, r3, #9
 80003be:	4699      	mov	r9, r3
 80003c0:	444a      	add	r2, r9
 80003c2:	0400      	lsls	r0, r0, #16
 80003c4:	0c0b      	lsrs	r3, r1, #16
 80003c6:	0c00      	lsrs	r0, r0, #16
 80003c8:	0409      	lsls	r1, r1, #16
 80003ca:	1809      	adds	r1, r1, r0
 80003cc:	0020      	movs	r0, r4
 80003ce:	4699      	mov	r9, r3
 80003d0:	4643      	mov	r3, r8
 80003d2:	4370      	muls	r0, r6
 80003d4:	435c      	muls	r4, r3
 80003d6:	437e      	muls	r6, r7
 80003d8:	435f      	muls	r7, r3
 80003da:	0c03      	lsrs	r3, r0, #16
 80003dc:	4698      	mov	r8, r3
 80003de:	19a4      	adds	r4, r4, r6
 80003e0:	4444      	add	r4, r8
 80003e2:	444a      	add	r2, r9
 80003e4:	9703      	str	r7, [sp, #12]
 80003e6:	42a6      	cmp	r6, r4
 80003e8:	d904      	bls.n	80003f4 <__aeabi_dmul+0x1d4>
 80003ea:	2380      	movs	r3, #128	; 0x80
 80003ec:	025b      	lsls	r3, r3, #9
 80003ee:	4698      	mov	r8, r3
 80003f0:	4447      	add	r7, r8
 80003f2:	9703      	str	r7, [sp, #12]
 80003f4:	0423      	lsls	r3, r4, #16
 80003f6:	9e02      	ldr	r6, [sp, #8]
 80003f8:	469a      	mov	sl, r3
 80003fa:	9b05      	ldr	r3, [sp, #20]
 80003fc:	445e      	add	r6, fp
 80003fe:	4698      	mov	r8, r3
 8000400:	42ae      	cmp	r6, r5
 8000402:	41ad      	sbcs	r5, r5
 8000404:	1876      	adds	r6, r6, r1
 8000406:	428e      	cmp	r6, r1
 8000408:	4189      	sbcs	r1, r1
 800040a:	0400      	lsls	r0, r0, #16
 800040c:	0c00      	lsrs	r0, r0, #16
 800040e:	4450      	add	r0, sl
 8000410:	4440      	add	r0, r8
 8000412:	426d      	negs	r5, r5
 8000414:	1947      	adds	r7, r0, r5
 8000416:	46b8      	mov	r8, r7
 8000418:	4693      	mov	fp, r2
 800041a:	4249      	negs	r1, r1
 800041c:	4689      	mov	r9, r1
 800041e:	44c3      	add	fp, r8
 8000420:	44d9      	add	r9, fp
 8000422:	4298      	cmp	r0, r3
 8000424:	4180      	sbcs	r0, r0
 8000426:	45a8      	cmp	r8, r5
 8000428:	41ad      	sbcs	r5, r5
 800042a:	4593      	cmp	fp, r2
 800042c:	4192      	sbcs	r2, r2
 800042e:	4589      	cmp	r9, r1
 8000430:	4189      	sbcs	r1, r1
 8000432:	426d      	negs	r5, r5
 8000434:	4240      	negs	r0, r0
 8000436:	4328      	orrs	r0, r5
 8000438:	0c24      	lsrs	r4, r4, #16
 800043a:	4252      	negs	r2, r2
 800043c:	4249      	negs	r1, r1
 800043e:	430a      	orrs	r2, r1
 8000440:	9b03      	ldr	r3, [sp, #12]
 8000442:	1900      	adds	r0, r0, r4
 8000444:	1880      	adds	r0, r0, r2
 8000446:	18c7      	adds	r7, r0, r3
 8000448:	464b      	mov	r3, r9
 800044a:	0ddc      	lsrs	r4, r3, #23
 800044c:	9b04      	ldr	r3, [sp, #16]
 800044e:	0275      	lsls	r5, r6, #9
 8000450:	431d      	orrs	r5, r3
 8000452:	1e6a      	subs	r2, r5, #1
 8000454:	4195      	sbcs	r5, r2
 8000456:	464b      	mov	r3, r9
 8000458:	0df6      	lsrs	r6, r6, #23
 800045a:	027f      	lsls	r7, r7, #9
 800045c:	4335      	orrs	r5, r6
 800045e:	025a      	lsls	r2, r3, #9
 8000460:	433c      	orrs	r4, r7
 8000462:	4315      	orrs	r5, r2
 8000464:	01fb      	lsls	r3, r7, #7
 8000466:	d400      	bmi.n	800046a <__aeabi_dmul+0x24a>
 8000468:	e11c      	b.n	80006a4 <__aeabi_dmul+0x484>
 800046a:	2101      	movs	r1, #1
 800046c:	086a      	lsrs	r2, r5, #1
 800046e:	400d      	ands	r5, r1
 8000470:	4315      	orrs	r5, r2
 8000472:	07e2      	lsls	r2, r4, #31
 8000474:	4315      	orrs	r5, r2
 8000476:	0864      	lsrs	r4, r4, #1
 8000478:	494f      	ldr	r1, [pc, #316]	; (80005b8 <__aeabi_dmul+0x398>)
 800047a:	4461      	add	r1, ip
 800047c:	2900      	cmp	r1, #0
 800047e:	dc00      	bgt.n	8000482 <__aeabi_dmul+0x262>
 8000480:	e0b0      	b.n	80005e4 <__aeabi_dmul+0x3c4>
 8000482:	076b      	lsls	r3, r5, #29
 8000484:	d009      	beq.n	800049a <__aeabi_dmul+0x27a>
 8000486:	220f      	movs	r2, #15
 8000488:	402a      	ands	r2, r5
 800048a:	2a04      	cmp	r2, #4
 800048c:	d005      	beq.n	800049a <__aeabi_dmul+0x27a>
 800048e:	1d2a      	adds	r2, r5, #4
 8000490:	42aa      	cmp	r2, r5
 8000492:	41ad      	sbcs	r5, r5
 8000494:	426d      	negs	r5, r5
 8000496:	1964      	adds	r4, r4, r5
 8000498:	0015      	movs	r5, r2
 800049a:	01e3      	lsls	r3, r4, #7
 800049c:	d504      	bpl.n	80004a8 <__aeabi_dmul+0x288>
 800049e:	2180      	movs	r1, #128	; 0x80
 80004a0:	4a46      	ldr	r2, [pc, #280]	; (80005bc <__aeabi_dmul+0x39c>)
 80004a2:	00c9      	lsls	r1, r1, #3
 80004a4:	4014      	ands	r4, r2
 80004a6:	4461      	add	r1, ip
 80004a8:	4a45      	ldr	r2, [pc, #276]	; (80005c0 <__aeabi_dmul+0x3a0>)
 80004aa:	4291      	cmp	r1, r2
 80004ac:	dd00      	ble.n	80004b0 <__aeabi_dmul+0x290>
 80004ae:	e726      	b.n	80002fe <__aeabi_dmul+0xde>
 80004b0:	0762      	lsls	r2, r4, #29
 80004b2:	08ed      	lsrs	r5, r5, #3
 80004b4:	0264      	lsls	r4, r4, #9
 80004b6:	0549      	lsls	r1, r1, #21
 80004b8:	4315      	orrs	r5, r2
 80004ba:	0b24      	lsrs	r4, r4, #12
 80004bc:	0d4a      	lsrs	r2, r1, #21
 80004be:	e710      	b.n	80002e2 <__aeabi_dmul+0xc2>
 80004c0:	4652      	mov	r2, sl
 80004c2:	4332      	orrs	r2, r6
 80004c4:	d100      	bne.n	80004c8 <__aeabi_dmul+0x2a8>
 80004c6:	e07f      	b.n	80005c8 <__aeabi_dmul+0x3a8>
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d100      	bne.n	80004ce <__aeabi_dmul+0x2ae>
 80004cc:	e0dc      	b.n	8000688 <__aeabi_dmul+0x468>
 80004ce:	0030      	movs	r0, r6
 80004d0:	f000 f9c0 	bl	8000854 <__clzsi2>
 80004d4:	0002      	movs	r2, r0
 80004d6:	3a0b      	subs	r2, #11
 80004d8:	231d      	movs	r3, #29
 80004da:	0001      	movs	r1, r0
 80004dc:	1a9b      	subs	r3, r3, r2
 80004de:	4652      	mov	r2, sl
 80004e0:	3908      	subs	r1, #8
 80004e2:	40da      	lsrs	r2, r3
 80004e4:	408e      	lsls	r6, r1
 80004e6:	4316      	orrs	r6, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	408a      	lsls	r2, r1
 80004ec:	9b00      	ldr	r3, [sp, #0]
 80004ee:	4935      	ldr	r1, [pc, #212]	; (80005c4 <__aeabi_dmul+0x3a4>)
 80004f0:	1a18      	subs	r0, r3, r0
 80004f2:	0003      	movs	r3, r0
 80004f4:	468c      	mov	ip, r1
 80004f6:	4463      	add	r3, ip
 80004f8:	2000      	movs	r0, #0
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	e6d3      	b.n	80002a6 <__aeabi_dmul+0x86>
 80004fe:	0025      	movs	r5, r4
 8000500:	4305      	orrs	r5, r0
 8000502:	d04a      	beq.n	800059a <__aeabi_dmul+0x37a>
 8000504:	2c00      	cmp	r4, #0
 8000506:	d100      	bne.n	800050a <__aeabi_dmul+0x2ea>
 8000508:	e0b0      	b.n	800066c <__aeabi_dmul+0x44c>
 800050a:	0020      	movs	r0, r4
 800050c:	f000 f9a2 	bl	8000854 <__clzsi2>
 8000510:	0001      	movs	r1, r0
 8000512:	0002      	movs	r2, r0
 8000514:	390b      	subs	r1, #11
 8000516:	231d      	movs	r3, #29
 8000518:	0010      	movs	r0, r2
 800051a:	1a5b      	subs	r3, r3, r1
 800051c:	0031      	movs	r1, r6
 800051e:	0035      	movs	r5, r6
 8000520:	3808      	subs	r0, #8
 8000522:	4084      	lsls	r4, r0
 8000524:	40d9      	lsrs	r1, r3
 8000526:	4085      	lsls	r5, r0
 8000528:	430c      	orrs	r4, r1
 800052a:	4826      	ldr	r0, [pc, #152]	; (80005c4 <__aeabi_dmul+0x3a4>)
 800052c:	1a83      	subs	r3, r0, r2
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	2300      	movs	r3, #0
 8000532:	4699      	mov	r9, r3
 8000534:	469b      	mov	fp, r3
 8000536:	e697      	b.n	8000268 <__aeabi_dmul+0x48>
 8000538:	0005      	movs	r5, r0
 800053a:	4325      	orrs	r5, r4
 800053c:	d126      	bne.n	800058c <__aeabi_dmul+0x36c>
 800053e:	2208      	movs	r2, #8
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2302      	movs	r3, #2
 8000544:	2400      	movs	r4, #0
 8000546:	4691      	mov	r9, r2
 8000548:	469b      	mov	fp, r3
 800054a:	e68d      	b.n	8000268 <__aeabi_dmul+0x48>
 800054c:	4652      	mov	r2, sl
 800054e:	9b00      	ldr	r3, [sp, #0]
 8000550:	4332      	orrs	r2, r6
 8000552:	d110      	bne.n	8000576 <__aeabi_dmul+0x356>
 8000554:	4915      	ldr	r1, [pc, #84]	; (80005ac <__aeabi_dmul+0x38c>)
 8000556:	2600      	movs	r6, #0
 8000558:	468c      	mov	ip, r1
 800055a:	4463      	add	r3, ip
 800055c:	4649      	mov	r1, r9
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2302      	movs	r3, #2
 8000562:	4319      	orrs	r1, r3
 8000564:	4689      	mov	r9, r1
 8000566:	2002      	movs	r0, #2
 8000568:	e69d      	b.n	80002a6 <__aeabi_dmul+0x86>
 800056a:	465b      	mov	r3, fp
 800056c:	9701      	str	r7, [sp, #4]
 800056e:	2b02      	cmp	r3, #2
 8000570:	d000      	beq.n	8000574 <__aeabi_dmul+0x354>
 8000572:	e6ad      	b.n	80002d0 <__aeabi_dmul+0xb0>
 8000574:	e6c3      	b.n	80002fe <__aeabi_dmul+0xde>
 8000576:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <__aeabi_dmul+0x38c>)
 8000578:	2003      	movs	r0, #3
 800057a:	4694      	mov	ip, r2
 800057c:	4463      	add	r3, ip
 800057e:	464a      	mov	r2, r9
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2303      	movs	r3, #3
 8000584:	431a      	orrs	r2, r3
 8000586:	4691      	mov	r9, r2
 8000588:	4652      	mov	r2, sl
 800058a:	e68c      	b.n	80002a6 <__aeabi_dmul+0x86>
 800058c:	220c      	movs	r2, #12
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2303      	movs	r3, #3
 8000592:	0005      	movs	r5, r0
 8000594:	4691      	mov	r9, r2
 8000596:	469b      	mov	fp, r3
 8000598:	e666      	b.n	8000268 <__aeabi_dmul+0x48>
 800059a:	2304      	movs	r3, #4
 800059c:	4699      	mov	r9, r3
 800059e:	2300      	movs	r3, #0
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	3301      	adds	r3, #1
 80005a4:	2400      	movs	r4, #0
 80005a6:	469b      	mov	fp, r3
 80005a8:	e65e      	b.n	8000268 <__aeabi_dmul+0x48>
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	000007ff 	.word	0x000007ff
 80005b0:	fffffc01 	.word	0xfffffc01
 80005b4:	0800385c 	.word	0x0800385c
 80005b8:	000003ff 	.word	0x000003ff
 80005bc:	feffffff 	.word	0xfeffffff
 80005c0:	000007fe 	.word	0x000007fe
 80005c4:	fffffc0d 	.word	0xfffffc0d
 80005c8:	4649      	mov	r1, r9
 80005ca:	2301      	movs	r3, #1
 80005cc:	4319      	orrs	r1, r3
 80005ce:	4689      	mov	r9, r1
 80005d0:	2600      	movs	r6, #0
 80005d2:	2001      	movs	r0, #1
 80005d4:	e667      	b.n	80002a6 <__aeabi_dmul+0x86>
 80005d6:	2300      	movs	r3, #0
 80005d8:	2480      	movs	r4, #128	; 0x80
 80005da:	2500      	movs	r5, #0
 80005dc:	4a43      	ldr	r2, [pc, #268]	; (80006ec <__aeabi_dmul+0x4cc>)
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	0324      	lsls	r4, r4, #12
 80005e2:	e67e      	b.n	80002e2 <__aeabi_dmul+0xc2>
 80005e4:	2001      	movs	r0, #1
 80005e6:	1a40      	subs	r0, r0, r1
 80005e8:	2838      	cmp	r0, #56	; 0x38
 80005ea:	dd00      	ble.n	80005ee <__aeabi_dmul+0x3ce>
 80005ec:	e676      	b.n	80002dc <__aeabi_dmul+0xbc>
 80005ee:	281f      	cmp	r0, #31
 80005f0:	dd5b      	ble.n	80006aa <__aeabi_dmul+0x48a>
 80005f2:	221f      	movs	r2, #31
 80005f4:	0023      	movs	r3, r4
 80005f6:	4252      	negs	r2, r2
 80005f8:	1a51      	subs	r1, r2, r1
 80005fa:	40cb      	lsrs	r3, r1
 80005fc:	0019      	movs	r1, r3
 80005fe:	2820      	cmp	r0, #32
 8000600:	d003      	beq.n	800060a <__aeabi_dmul+0x3ea>
 8000602:	4a3b      	ldr	r2, [pc, #236]	; (80006f0 <__aeabi_dmul+0x4d0>)
 8000604:	4462      	add	r2, ip
 8000606:	4094      	lsls	r4, r2
 8000608:	4325      	orrs	r5, r4
 800060a:	1e6a      	subs	r2, r5, #1
 800060c:	4195      	sbcs	r5, r2
 800060e:	002a      	movs	r2, r5
 8000610:	430a      	orrs	r2, r1
 8000612:	2107      	movs	r1, #7
 8000614:	000d      	movs	r5, r1
 8000616:	2400      	movs	r4, #0
 8000618:	4015      	ands	r5, r2
 800061a:	4211      	tst	r1, r2
 800061c:	d05b      	beq.n	80006d6 <__aeabi_dmul+0x4b6>
 800061e:	210f      	movs	r1, #15
 8000620:	2400      	movs	r4, #0
 8000622:	4011      	ands	r1, r2
 8000624:	2904      	cmp	r1, #4
 8000626:	d053      	beq.n	80006d0 <__aeabi_dmul+0x4b0>
 8000628:	1d11      	adds	r1, r2, #4
 800062a:	4291      	cmp	r1, r2
 800062c:	4192      	sbcs	r2, r2
 800062e:	4252      	negs	r2, r2
 8000630:	18a4      	adds	r4, r4, r2
 8000632:	000a      	movs	r2, r1
 8000634:	0223      	lsls	r3, r4, #8
 8000636:	d54b      	bpl.n	80006d0 <__aeabi_dmul+0x4b0>
 8000638:	2201      	movs	r2, #1
 800063a:	2400      	movs	r4, #0
 800063c:	2500      	movs	r5, #0
 800063e:	e650      	b.n	80002e2 <__aeabi_dmul+0xc2>
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	031b      	lsls	r3, r3, #12
 8000644:	421c      	tst	r4, r3
 8000646:	d009      	beq.n	800065c <__aeabi_dmul+0x43c>
 8000648:	421e      	tst	r6, r3
 800064a:	d107      	bne.n	800065c <__aeabi_dmul+0x43c>
 800064c:	4333      	orrs	r3, r6
 800064e:	031c      	lsls	r4, r3, #12
 8000650:	4643      	mov	r3, r8
 8000652:	0015      	movs	r5, r2
 8000654:	0b24      	lsrs	r4, r4, #12
 8000656:	4a25      	ldr	r2, [pc, #148]	; (80006ec <__aeabi_dmul+0x4cc>)
 8000658:	9301      	str	r3, [sp, #4]
 800065a:	e642      	b.n	80002e2 <__aeabi_dmul+0xc2>
 800065c:	2280      	movs	r2, #128	; 0x80
 800065e:	0312      	lsls	r2, r2, #12
 8000660:	4314      	orrs	r4, r2
 8000662:	0324      	lsls	r4, r4, #12
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <__aeabi_dmul+0x4cc>)
 8000666:	0b24      	lsrs	r4, r4, #12
 8000668:	9701      	str	r7, [sp, #4]
 800066a:	e63a      	b.n	80002e2 <__aeabi_dmul+0xc2>
 800066c:	f000 f8f2 	bl	8000854 <__clzsi2>
 8000670:	0001      	movs	r1, r0
 8000672:	0002      	movs	r2, r0
 8000674:	3115      	adds	r1, #21
 8000676:	3220      	adds	r2, #32
 8000678:	291c      	cmp	r1, #28
 800067a:	dc00      	bgt.n	800067e <__aeabi_dmul+0x45e>
 800067c:	e74b      	b.n	8000516 <__aeabi_dmul+0x2f6>
 800067e:	0034      	movs	r4, r6
 8000680:	3808      	subs	r0, #8
 8000682:	2500      	movs	r5, #0
 8000684:	4084      	lsls	r4, r0
 8000686:	e750      	b.n	800052a <__aeabi_dmul+0x30a>
 8000688:	f000 f8e4 	bl	8000854 <__clzsi2>
 800068c:	0003      	movs	r3, r0
 800068e:	001a      	movs	r2, r3
 8000690:	3215      	adds	r2, #21
 8000692:	3020      	adds	r0, #32
 8000694:	2a1c      	cmp	r2, #28
 8000696:	dc00      	bgt.n	800069a <__aeabi_dmul+0x47a>
 8000698:	e71e      	b.n	80004d8 <__aeabi_dmul+0x2b8>
 800069a:	4656      	mov	r6, sl
 800069c:	3b08      	subs	r3, #8
 800069e:	2200      	movs	r2, #0
 80006a0:	409e      	lsls	r6, r3
 80006a2:	e723      	b.n	80004ec <__aeabi_dmul+0x2cc>
 80006a4:	9b00      	ldr	r3, [sp, #0]
 80006a6:	469c      	mov	ip, r3
 80006a8:	e6e6      	b.n	8000478 <__aeabi_dmul+0x258>
 80006aa:	4912      	ldr	r1, [pc, #72]	; (80006f4 <__aeabi_dmul+0x4d4>)
 80006ac:	0022      	movs	r2, r4
 80006ae:	4461      	add	r1, ip
 80006b0:	002e      	movs	r6, r5
 80006b2:	408d      	lsls	r5, r1
 80006b4:	408a      	lsls	r2, r1
 80006b6:	40c6      	lsrs	r6, r0
 80006b8:	1e69      	subs	r1, r5, #1
 80006ba:	418d      	sbcs	r5, r1
 80006bc:	4332      	orrs	r2, r6
 80006be:	432a      	orrs	r2, r5
 80006c0:	40c4      	lsrs	r4, r0
 80006c2:	0753      	lsls	r3, r2, #29
 80006c4:	d0b6      	beq.n	8000634 <__aeabi_dmul+0x414>
 80006c6:	210f      	movs	r1, #15
 80006c8:	4011      	ands	r1, r2
 80006ca:	2904      	cmp	r1, #4
 80006cc:	d1ac      	bne.n	8000628 <__aeabi_dmul+0x408>
 80006ce:	e7b1      	b.n	8000634 <__aeabi_dmul+0x414>
 80006d0:	0765      	lsls	r5, r4, #29
 80006d2:	0264      	lsls	r4, r4, #9
 80006d4:	0b24      	lsrs	r4, r4, #12
 80006d6:	08d2      	lsrs	r2, r2, #3
 80006d8:	4315      	orrs	r5, r2
 80006da:	2200      	movs	r2, #0
 80006dc:	e601      	b.n	80002e2 <__aeabi_dmul+0xc2>
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	0312      	lsls	r2, r2, #12
 80006e2:	4314      	orrs	r4, r2
 80006e4:	0324      	lsls	r4, r4, #12
 80006e6:	4a01      	ldr	r2, [pc, #4]	; (80006ec <__aeabi_dmul+0x4cc>)
 80006e8:	0b24      	lsrs	r4, r4, #12
 80006ea:	e5fa      	b.n	80002e2 <__aeabi_dmul+0xc2>
 80006ec:	000007ff 	.word	0x000007ff
 80006f0:	0000043e 	.word	0x0000043e
 80006f4:	0000041e 	.word	0x0000041e

080006f8 <__aeabi_ui2d>:
 80006f8:	b510      	push	{r4, lr}
 80006fa:	1e04      	subs	r4, r0, #0
 80006fc:	d010      	beq.n	8000720 <__aeabi_ui2d+0x28>
 80006fe:	f000 f8a9 	bl	8000854 <__clzsi2>
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <__aeabi_ui2d+0x48>)
 8000704:	1a1b      	subs	r3, r3, r0
 8000706:	280a      	cmp	r0, #10
 8000708:	dc11      	bgt.n	800072e <__aeabi_ui2d+0x36>
 800070a:	220b      	movs	r2, #11
 800070c:	0021      	movs	r1, r4
 800070e:	1a12      	subs	r2, r2, r0
 8000710:	40d1      	lsrs	r1, r2
 8000712:	3015      	adds	r0, #21
 8000714:	030a      	lsls	r2, r1, #12
 8000716:	055b      	lsls	r3, r3, #21
 8000718:	4084      	lsls	r4, r0
 800071a:	0b12      	lsrs	r2, r2, #12
 800071c:	0d5b      	lsrs	r3, r3, #21
 800071e:	e001      	b.n	8000724 <__aeabi_ui2d+0x2c>
 8000720:	2300      	movs	r3, #0
 8000722:	2200      	movs	r2, #0
 8000724:	051b      	lsls	r3, r3, #20
 8000726:	4313      	orrs	r3, r2
 8000728:	0020      	movs	r0, r4
 800072a:	0019      	movs	r1, r3
 800072c:	bd10      	pop	{r4, pc}
 800072e:	0022      	movs	r2, r4
 8000730:	380b      	subs	r0, #11
 8000732:	4082      	lsls	r2, r0
 8000734:	055b      	lsls	r3, r3, #21
 8000736:	0312      	lsls	r2, r2, #12
 8000738:	2400      	movs	r4, #0
 800073a:	0b12      	lsrs	r2, r2, #12
 800073c:	0d5b      	lsrs	r3, r3, #21
 800073e:	e7f1      	b.n	8000724 <__aeabi_ui2d+0x2c>
 8000740:	0000041e 	.word	0x0000041e

08000744 <__aeabi_d2f>:
 8000744:	0002      	movs	r2, r0
 8000746:	004b      	lsls	r3, r1, #1
 8000748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800074a:	0d5b      	lsrs	r3, r3, #21
 800074c:	030c      	lsls	r4, r1, #12
 800074e:	4e3d      	ldr	r6, [pc, #244]	; (8000844 <__aeabi_d2f+0x100>)
 8000750:	0a64      	lsrs	r4, r4, #9
 8000752:	0f40      	lsrs	r0, r0, #29
 8000754:	1c5f      	adds	r7, r3, #1
 8000756:	0fc9      	lsrs	r1, r1, #31
 8000758:	4304      	orrs	r4, r0
 800075a:	00d5      	lsls	r5, r2, #3
 800075c:	4237      	tst	r7, r6
 800075e:	d00a      	beq.n	8000776 <__aeabi_d2f+0x32>
 8000760:	4839      	ldr	r0, [pc, #228]	; (8000848 <__aeabi_d2f+0x104>)
 8000762:	181e      	adds	r6, r3, r0
 8000764:	2efe      	cmp	r6, #254	; 0xfe
 8000766:	dd16      	ble.n	8000796 <__aeabi_d2f+0x52>
 8000768:	20ff      	movs	r0, #255	; 0xff
 800076a:	2400      	movs	r4, #0
 800076c:	05c0      	lsls	r0, r0, #23
 800076e:	4320      	orrs	r0, r4
 8000770:	07c9      	lsls	r1, r1, #31
 8000772:	4308      	orrs	r0, r1
 8000774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000776:	2b00      	cmp	r3, #0
 8000778:	d106      	bne.n	8000788 <__aeabi_d2f+0x44>
 800077a:	432c      	orrs	r4, r5
 800077c:	d026      	beq.n	80007cc <__aeabi_d2f+0x88>
 800077e:	2205      	movs	r2, #5
 8000780:	0192      	lsls	r2, r2, #6
 8000782:	0a54      	lsrs	r4, r2, #9
 8000784:	b2d8      	uxtb	r0, r3
 8000786:	e7f1      	b.n	800076c <__aeabi_d2f+0x28>
 8000788:	4325      	orrs	r5, r4
 800078a:	d0ed      	beq.n	8000768 <__aeabi_d2f+0x24>
 800078c:	2080      	movs	r0, #128	; 0x80
 800078e:	03c0      	lsls	r0, r0, #15
 8000790:	4304      	orrs	r4, r0
 8000792:	20ff      	movs	r0, #255	; 0xff
 8000794:	e7ea      	b.n	800076c <__aeabi_d2f+0x28>
 8000796:	2e00      	cmp	r6, #0
 8000798:	dd1b      	ble.n	80007d2 <__aeabi_d2f+0x8e>
 800079a:	0192      	lsls	r2, r2, #6
 800079c:	1e53      	subs	r3, r2, #1
 800079e:	419a      	sbcs	r2, r3
 80007a0:	00e4      	lsls	r4, r4, #3
 80007a2:	0f6d      	lsrs	r5, r5, #29
 80007a4:	4322      	orrs	r2, r4
 80007a6:	432a      	orrs	r2, r5
 80007a8:	0753      	lsls	r3, r2, #29
 80007aa:	d048      	beq.n	800083e <__aeabi_d2f+0xfa>
 80007ac:	230f      	movs	r3, #15
 80007ae:	4013      	ands	r3, r2
 80007b0:	2b04      	cmp	r3, #4
 80007b2:	d000      	beq.n	80007b6 <__aeabi_d2f+0x72>
 80007b4:	3204      	adds	r2, #4
 80007b6:	2380      	movs	r3, #128	; 0x80
 80007b8:	04db      	lsls	r3, r3, #19
 80007ba:	4013      	ands	r3, r2
 80007bc:	d03f      	beq.n	800083e <__aeabi_d2f+0xfa>
 80007be:	1c70      	adds	r0, r6, #1
 80007c0:	2efe      	cmp	r6, #254	; 0xfe
 80007c2:	d0d1      	beq.n	8000768 <__aeabi_d2f+0x24>
 80007c4:	0192      	lsls	r2, r2, #6
 80007c6:	0a54      	lsrs	r4, r2, #9
 80007c8:	b2c0      	uxtb	r0, r0
 80007ca:	e7cf      	b.n	800076c <__aeabi_d2f+0x28>
 80007cc:	2000      	movs	r0, #0
 80007ce:	2400      	movs	r4, #0
 80007d0:	e7cc      	b.n	800076c <__aeabi_d2f+0x28>
 80007d2:	0032      	movs	r2, r6
 80007d4:	3217      	adds	r2, #23
 80007d6:	db22      	blt.n	800081e <__aeabi_d2f+0xda>
 80007d8:	2080      	movs	r0, #128	; 0x80
 80007da:	0400      	lsls	r0, r0, #16
 80007dc:	4320      	orrs	r0, r4
 80007de:	241e      	movs	r4, #30
 80007e0:	1ba4      	subs	r4, r4, r6
 80007e2:	2c1f      	cmp	r4, #31
 80007e4:	dd1d      	ble.n	8000822 <__aeabi_d2f+0xde>
 80007e6:	2202      	movs	r2, #2
 80007e8:	4252      	negs	r2, r2
 80007ea:	1b96      	subs	r6, r2, r6
 80007ec:	0002      	movs	r2, r0
 80007ee:	40f2      	lsrs	r2, r6
 80007f0:	0016      	movs	r6, r2
 80007f2:	2c20      	cmp	r4, #32
 80007f4:	d004      	beq.n	8000800 <__aeabi_d2f+0xbc>
 80007f6:	4a15      	ldr	r2, [pc, #84]	; (800084c <__aeabi_d2f+0x108>)
 80007f8:	4694      	mov	ip, r2
 80007fa:	4463      	add	r3, ip
 80007fc:	4098      	lsls	r0, r3
 80007fe:	4305      	orrs	r5, r0
 8000800:	002a      	movs	r2, r5
 8000802:	1e53      	subs	r3, r2, #1
 8000804:	419a      	sbcs	r2, r3
 8000806:	4332      	orrs	r2, r6
 8000808:	2600      	movs	r6, #0
 800080a:	0753      	lsls	r3, r2, #29
 800080c:	d1ce      	bne.n	80007ac <__aeabi_d2f+0x68>
 800080e:	2480      	movs	r4, #128	; 0x80
 8000810:	0013      	movs	r3, r2
 8000812:	04e4      	lsls	r4, r4, #19
 8000814:	2001      	movs	r0, #1
 8000816:	4023      	ands	r3, r4
 8000818:	4222      	tst	r2, r4
 800081a:	d1d3      	bne.n	80007c4 <__aeabi_d2f+0x80>
 800081c:	e7b0      	b.n	8000780 <__aeabi_d2f+0x3c>
 800081e:	2300      	movs	r3, #0
 8000820:	e7ad      	b.n	800077e <__aeabi_d2f+0x3a>
 8000822:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <__aeabi_d2f+0x10c>)
 8000824:	4694      	mov	ip, r2
 8000826:	002a      	movs	r2, r5
 8000828:	40e2      	lsrs	r2, r4
 800082a:	0014      	movs	r4, r2
 800082c:	002a      	movs	r2, r5
 800082e:	4463      	add	r3, ip
 8000830:	409a      	lsls	r2, r3
 8000832:	4098      	lsls	r0, r3
 8000834:	1e55      	subs	r5, r2, #1
 8000836:	41aa      	sbcs	r2, r5
 8000838:	4302      	orrs	r2, r0
 800083a:	4322      	orrs	r2, r4
 800083c:	e7e4      	b.n	8000808 <__aeabi_d2f+0xc4>
 800083e:	0033      	movs	r3, r6
 8000840:	e79e      	b.n	8000780 <__aeabi_d2f+0x3c>
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	000007fe 	.word	0x000007fe
 8000848:	fffffc80 	.word	0xfffffc80
 800084c:	fffffca2 	.word	0xfffffca2
 8000850:	fffffc82 	.word	0xfffffc82

08000854 <__clzsi2>:
 8000854:	211c      	movs	r1, #28
 8000856:	2301      	movs	r3, #1
 8000858:	041b      	lsls	r3, r3, #16
 800085a:	4298      	cmp	r0, r3
 800085c:	d301      	bcc.n	8000862 <__clzsi2+0xe>
 800085e:	0c00      	lsrs	r0, r0, #16
 8000860:	3910      	subs	r1, #16
 8000862:	0a1b      	lsrs	r3, r3, #8
 8000864:	4298      	cmp	r0, r3
 8000866:	d301      	bcc.n	800086c <__clzsi2+0x18>
 8000868:	0a00      	lsrs	r0, r0, #8
 800086a:	3908      	subs	r1, #8
 800086c:	091b      	lsrs	r3, r3, #4
 800086e:	4298      	cmp	r0, r3
 8000870:	d301      	bcc.n	8000876 <__clzsi2+0x22>
 8000872:	0900      	lsrs	r0, r0, #4
 8000874:	3904      	subs	r1, #4
 8000876:	a202      	add	r2, pc, #8	; (adr r2, 8000880 <__clzsi2+0x2c>)
 8000878:	5c10      	ldrb	r0, [r2, r0]
 800087a:	1840      	adds	r0, r0, r1
 800087c:	4770      	bx	lr
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	02020304 	.word	0x02020304
 8000884:	01010101 	.word	0x01010101
	...

08000890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b087      	sub	sp, #28
 8000894:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000896:	f000 fe13 	bl	80014c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089a:	f000 f865 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089e:	f000 fa01 	bl	8000ca4 <MX_GPIO_Init>
  MX_DMA_Init();
 80008a2:	f000 f9d9 	bl	8000c58 <MX_DMA_Init>
  MX_SPI1_Init();
 80008a6:	f000 f8c1 	bl	8000a2c <MX_SPI1_Init>
  MX_TIM1_Init();
 80008aa:	f000 f905 	bl	8000ab8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80008ae:	f000 f98f 	bl	8000bd0 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80008b2:	f000 f96b 	bl	8000b8c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* CONFIIGURE THE CONTROL DATA BUFFER */

  /* Initialize the entire TX data buffer to 0. */
  for(int i = 0; i < spiSize; i++)
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	e007      	b.n	80008cc <main+0x3c>
      txData[i] = 0;
 80008bc:	4a1f      	ldr	r2, [pc, #124]	; (800093c <main+0xac>)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	18d3      	adds	r3, r2, r3
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < spiSize; i++)
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	3301      	adds	r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2b11      	cmp	r3, #17
 80008d0:	ddf4      	ble.n	80008bc <main+0x2c>

  /* Configure data to send via SPI*/
  setTxData(txData, &testMode, &out0, &out1, &out2);
 80008d2:	4c1b      	ldr	r4, [pc, #108]	; (8000940 <main+0xb0>)
 80008d4:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <main+0xb4>)
 80008d6:	491c      	ldr	r1, [pc, #112]	; (8000948 <main+0xb8>)
 80008d8:	4818      	ldr	r0, [pc, #96]	; (800093c <main+0xac>)
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <main+0xbc>)
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	0023      	movs	r3, r4
 80008e0:	f000 fa28 	bl	8000d34 <setTxData>

  /* Initialize the UART data buffer to all blank characters */
  for(int i = 0; i < spiWords; i++)
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	e016      	b.n	8000918 <main+0x88>
  	for(int j = 0; j < uartChars; j++)
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	e00d      	b.n	800090c <main+0x7c>
  	{
  	   uartBuf[i][j] = ' ';
 80008f0:	4917      	ldr	r1, [pc, #92]	; (8000950 <main+0xc0>)
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	0013      	movs	r3, r2
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	189b      	adds	r3, r3, r2
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	18ca      	adds	r2, r1, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	18d3      	adds	r3, r2, r3
 8000902:	2220      	movs	r2, #32
 8000904:	701a      	strb	r2, [r3, #0]
  	for(int j = 0; j < uartChars; j++)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3301      	adds	r3, #1
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b05      	cmp	r3, #5
 8000910:	ddee      	ble.n	80008f0 <main+0x60>
  for(int i = 0; i < spiWords; i++)
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	3301      	adds	r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	2b08      	cmp	r3, #8
 800091c:	dde5      	ble.n	80008ea <main+0x5a>
  	}

  /*SPI DMA config, 1st call test*/
  SPI_DMA_TxRx_CONFIG(&hspi1, &hdma_spi1_tx, &hdma_spi1_rx, txData, rxData);
 800091e:	4c07      	ldr	r4, [pc, #28]	; (800093c <main+0xac>)
 8000920:	4a0c      	ldr	r2, [pc, #48]	; (8000954 <main+0xc4>)
 8000922:	490d      	ldr	r1, [pc, #52]	; (8000958 <main+0xc8>)
 8000924:	480d      	ldr	r0, [pc, #52]	; (800095c <main+0xcc>)
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <main+0xd0>)
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	0023      	movs	r3, r4
 800092c:	f000 faa4 	bl	8000e78 <SPI_DMA_TxRx_CONFIG>

  /* Enable TIM1 interrupt */
  HAL_TIM_Base_Start_IT(&htim1);
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <main+0xd4>)
 8000932:	0018      	movs	r0, r3
 8000934:	f001 ffce 	bl	80028d4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000938:	e7fe      	b.n	8000938 <main+0xa8>
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	20000274 	.word	0x20000274
 8000940:	2000029a 	.word	0x2000029a
 8000944:	20000001 	.word	0x20000001
 8000948:	20000000 	.word	0x20000000
 800094c:	20000002 	.word	0x20000002
 8000950:	200002a8 	.word	0x200002a8
 8000954:	20000090 	.word	0x20000090
 8000958:	200000d4 	.word	0x200000d4
 800095c:	2000002c 	.word	0x2000002c
 8000960:	20000288 	.word	0x20000288
 8000964:	20000118 	.word	0x20000118

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b095      	sub	sp, #84	; 0x54
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	2420      	movs	r4, #32
 8000970:	193b      	adds	r3, r7, r4
 8000972:	0018      	movs	r0, r3
 8000974:	2330      	movs	r3, #48	; 0x30
 8000976:	001a      	movs	r2, r3
 8000978:	2100      	movs	r1, #0
 800097a:	f002 ff5b 	bl	8003834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097e:	2310      	movs	r3, #16
 8000980:	18fb      	adds	r3, r7, r3
 8000982:	0018      	movs	r0, r3
 8000984:	2310      	movs	r3, #16
 8000986:	001a      	movs	r2, r3
 8000988:	2100      	movs	r1, #0
 800098a:	f002 ff53 	bl	8003834 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800098e:	003b      	movs	r3, r7
 8000990:	0018      	movs	r0, r3
 8000992:	2310      	movs	r3, #16
 8000994:	001a      	movs	r2, r3
 8000996:	2100      	movs	r1, #0
 8000998:	f002 ff4c 	bl	8003834 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800099c:	0021      	movs	r1, r4
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2202      	movs	r2, #2
 80009a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2201      	movs	r2, #1
 80009a8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2210      	movs	r2, #16
 80009ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2202      	movs	r2, #2
 80009b4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2280      	movs	r2, #128	; 0x80
 80009c0:	0392      	lsls	r2, r2, #14
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2200      	movs	r2, #0
 80009c8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	0018      	movs	r0, r3
 80009ce:	f001 f94d 	bl	8001c6c <HAL_RCC_OscConfig>
 80009d2:	1e03      	subs	r3, r0, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80009d6:	f000 fb77 	bl	80010c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009da:	2110      	movs	r1, #16
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2207      	movs	r2, #7
 80009e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2202      	movs	r2, #2
 80009e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2101      	movs	r1, #1
 80009f8:	0018      	movs	r0, r3
 80009fa:	f001 fc51 	bl	80022a0 <HAL_RCC_ClockConfig>
 80009fe:	1e03      	subs	r3, r0, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a02:	f000 fb61 	bl	80010c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a06:	003b      	movs	r3, r7
 8000a08:	2201      	movs	r2, #1
 8000a0a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a0c:	003b      	movs	r3, r7
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a12:	003b      	movs	r3, r7
 8000a14:	0018      	movs	r0, r3
 8000a16:	f001 fd87 	bl	8002528 <HAL_RCCEx_PeriphCLKConfig>
 8000a1a:	1e03      	subs	r3, r0, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000a1e:	f000 fb53 	bl	80010c8 <Error_Handler>
  }
}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b015      	add	sp, #84	; 0x54
 8000a28:	bd90      	pop	{r4, r7, pc}
	...

08000a2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_SPI1_Init+0x84>)
 8000a32:	4a20      	ldr	r2, [pc, #128]	; (8000ab4 <MX_SPI1_Init+0x88>)
 8000a34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a36:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <MX_SPI1_Init+0x84>)
 8000a38:	2282      	movs	r2, #130	; 0x82
 8000a3a:	0052      	lsls	r2, r2, #1
 8000a3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_SPI1_Init+0x84>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_SPI1_Init+0x84>)
 8000a46:	22e0      	movs	r2, #224	; 0xe0
 8000a48:	00d2      	lsls	r2, r2, #3
 8000a4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_SPI1_Init+0x84>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_SPI1_Init+0x84>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_SPI1_Init+0x84>)
 8000a5a:	2280      	movs	r2, #128	; 0x80
 8000a5c:	0092      	lsls	r2, r2, #2
 8000a5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_SPI1_Init+0x84>)
 8000a62:	2208      	movs	r2, #8
 8000a64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_SPI1_Init+0x84>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <MX_SPI1_Init+0x84>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_SPI1_Init+0x84>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a78:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <MX_SPI1_Init+0x84>)
 8000a7a:	2207      	movs	r2, #7
 8000a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_SPI1_Init+0x84>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <MX_SPI1_Init+0x84>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_SPI1_Init+0x84>)
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f001 fe19 	bl	80026c4 <HAL_SPI_Init>
 8000a92:	1e03      	subs	r3, r0, #0
 8000a94:	d001      	beq.n	8000a9a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a96:	f000 fb17 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <MX_SPI1_Init+0x84>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <MX_SPI1_Init+0x84>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2140      	movs	r1, #64	; 0x40
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000002c 	.word	0x2000002c
 8000ab4:	40013000 	.word	0x40013000

08000ab8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000abe:	2310      	movs	r3, #16
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	2100      	movs	r1, #0
 8000aca:	f002 feb3 	bl	8003834 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ace:	2308      	movs	r3, #8
 8000ad0:	18fb      	adds	r3, r7, r3
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	001a      	movs	r2, r3
 8000ad8:	2100      	movs	r1, #0
 8000ada:	f002 feab 	bl	8003834 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ade:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <MX_TIM1_Init+0xc4>)
 8000ae0:	4a27      	ldr	r2, [pc, #156]	; (8000b80 <MX_TIM1_Init+0xc8>)
 8000ae2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ae4:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <MX_TIM1_Init+0xc4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aea:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <MX_TIM1_Init+0xc4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1250-1;
 8000af0:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <MX_TIM1_Init+0xc4>)
 8000af2:	4a24      	ldr	r2, [pc, #144]	; (8000b84 <MX_TIM1_Init+0xcc>)
 8000af4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af6:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <MX_TIM1_Init+0xc4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <MX_TIM1_Init+0xc4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b02:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <MX_TIM1_Init+0xc4>)
 8000b04:	2280      	movs	r2, #128	; 0x80
 8000b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b08:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <MX_TIM1_Init+0xc4>)
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f001 fe92 	bl	8002834 <HAL_TIM_Base_Init>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 8000b14:	f000 fad8 	bl	80010c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b18:	2110      	movs	r1, #16
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2280      	movs	r2, #128	; 0x80
 8000b1e:	0152      	lsls	r2, r2, #5
 8000b20:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b22:	187a      	adds	r2, r7, r1
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <MX_TIM1_Init+0xc4>)
 8000b26:	0011      	movs	r1, r2
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f002 f835 	bl	8002b98 <HAL_TIM_ConfigClockSource>
 8000b2e:	1e03      	subs	r3, r0, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000b32:	f000 fac9 	bl	80010c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b36:	2108      	movs	r1, #8
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	2200      	movs	r2, #0
 8000b42:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b44:	187a      	adds	r2, r7, r1
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <MX_TIM1_Init+0xc4>)
 8000b48:	0011      	movs	r1, r2
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f002 fa28 	bl	8002fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b50:	1e03      	subs	r3, r0, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000b54:	f000 fab8 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <MX_TIM1_Init+0xd0>)
 8000b5a:	699a      	ldr	r2, [r3, #24]
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <MX_TIM1_Init+0xd0>)
 8000b5e:	2180      	movs	r1, #128	; 0x80
 8000b60:	0109      	lsls	r1, r1, #4
 8000b62:	430a      	orrs	r2, r1
 8000b64:	619a      	str	r2, [r3, #24]
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_TIM1_Init+0xd0>)
 8000b68:	699a      	ldr	r2, [r3, #24]
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	011b      	lsls	r3, r3, #4
 8000b6e:	4013      	ands	r3, r2
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END TIM1_Init 2 */

}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b008      	add	sp, #32
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000118 	.word	0x20000118
 8000b80:	40012c00 	.word	0x40012c00
 8000b84:	000004e1 	.word	0x000004e1
 8000b88:	40021000 	.word	0x40021000

08000b8c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_TIM6_Init+0x38>)
 8000b92:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <MX_TIM6_Init+0x3c>)
 8000b94:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_TIM6_Init+0x38>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_TIM6_Init+0x38>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_TIM6_Init+0x38>)
 8000ba4:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <MX_TIM6_Init+0x40>)
 8000ba6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_TIM6_Init+0x38>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <MX_TIM6_Init+0x38>)
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f001 fe3f 	bl	8002834 <HAL_TIM_Base_Init>
 8000bb6:	1e03      	subs	r3, r0, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 8000bba:	f000 fa85 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000160 	.word	0x20000160
 8000bc8:	40001000 	.word	0x40001000
 8000bcc:	00002710 	.word	0x00002710

08000bd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  __HAL_RCC_USART1_CLK_ENABLE();
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <MX_USART1_UART_Init+0x78>)
 8000bd8:	699a      	ldr	r2, [r3, #24]
 8000bda:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <MX_USART1_UART_Init+0x78>)
 8000bdc:	2180      	movs	r1, #128	; 0x80
 8000bde:	01c9      	lsls	r1, r1, #7
 8000be0:	430a      	orrs	r2, r1
 8000be2:	619a      	str	r2, [r3, #24]
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <MX_USART1_UART_Init+0x78>)
 8000be6:	699a      	ldr	r2, [r3, #24]
 8000be8:	2380      	movs	r3, #128	; 0x80
 8000bea:	01db      	lsls	r3, r3, #7
 8000bec:	4013      	ands	r3, r2
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MX_USART1_UART_Init+0x7c>)
 8000bf4:	4a16      	ldr	r2, [pc, #88]	; (8000c50 <MX_USART1_UART_Init+0x80>)
 8000bf6:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 111731;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_USART1_UART_Init+0x7c>)
 8000bfa:	4a16      	ldr	r2, [pc, #88]	; (8000c54 <MX_USART1_UART_Init+0x84>)
 8000bfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_USART1_UART_Init+0x7c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_USART1_UART_Init+0x7c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_USART1_UART_Init+0x7c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_USART1_UART_Init+0x7c>)
 8000c12:	2208      	movs	r2, #8
 8000c14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <MX_USART1_UART_Init+0x7c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_USART1_UART_Init+0x7c>)
 8000c1e:	2280      	movs	r2, #128	; 0x80
 8000c20:	0212      	lsls	r2, r2, #8
 8000c22:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_USART1_UART_Init+0x7c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_USART1_UART_Init+0x7c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_USART1_UART_Init+0x7c>)
 8000c32:	0018      	movs	r0, r3
 8000c34:	f002 fa1c 	bl	8003070 <HAL_UART_Init>
 8000c38:	1e03      	subs	r3, r0, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8000c3c:	f000 fa44 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b002      	add	sp, #8
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	200001a8 	.word	0x200001a8
 8000c50:	40013800 	.word	0x40013800
 8000c54:	0001b473 	.word	0x0001b473

08000c58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <MX_DMA_Init+0x48>)
 8000c60:	695a      	ldr	r2, [r3, #20]
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_DMA_Init+0x48>)
 8000c64:	2101      	movs	r1, #1
 8000c66:	430a      	orrs	r2, r1
 8000c68:	615a      	str	r2, [r3, #20]
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <MX_DMA_Init+0x48>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4013      	ands	r3, r2
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f000 fd30 	bl	80016e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000c80:	200a      	movs	r0, #10
 8000c82:	f000 fd42 	bl	800170a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	200b      	movs	r0, #11
 8000c8c:	f000 fd28 	bl	80016e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000c90:	200b      	movs	r0, #11
 8000c92:	f000 fd3a 	bl	800170a <HAL_NVIC_EnableIRQ>

}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b002      	add	sp, #8
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b089      	sub	sp, #36	; 0x24
 8000ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	240c      	movs	r4, #12
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	0018      	movs	r0, r3
 8000cb0:	2314      	movs	r3, #20
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	f002 fdbd 	bl	8003834 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_GPIO_Init+0x88>)
 8000cbc:	695a      	ldr	r2, [r3, #20]
 8000cbe:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <MX_GPIO_Init+0x88>)
 8000cc0:	2180      	movs	r1, #128	; 0x80
 8000cc2:	0289      	lsls	r1, r1, #10
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	615a      	str	r2, [r3, #20]
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_GPIO_Init+0x88>)
 8000cca:	695a      	ldr	r2, [r3, #20]
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	029b      	lsls	r3, r3, #10
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_GPIO_Init+0x88>)
 8000cd8:	695a      	ldr	r2, [r3, #20]
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_GPIO_Init+0x88>)
 8000cdc:	2180      	movs	r1, #128	; 0x80
 8000cde:	0309      	lsls	r1, r1, #12
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	615a      	str	r2, [r3, #20]
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_GPIO_Init+0x88>)
 8000ce6:	695a      	ldr	r2, [r3, #20]
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	031b      	lsls	r3, r3, #12
 8000cec:	4013      	ands	r3, r2
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_SET);
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_GPIO_Init+0x8c>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2110      	movs	r1, #16
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f000 ff99 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_SS_Pin */
  GPIO_InitStruct.Pin = SPI1_SS_Pin;
 8000cfe:	0021      	movs	r1, r4
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	2210      	movs	r2, #16
 8000d04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	2201      	movs	r2, #1
 8000d0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	2201      	movs	r2, #1
 8000d10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2203      	movs	r2, #3
 8000d16:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_SS_GPIO_Port, &GPIO_InitStruct);
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <MX_GPIO_Init+0x8c>)
 8000d1c:	0019      	movs	r1, r3
 8000d1e:	0010      	movs	r0, r2
 8000d20:	f000 fe16 	bl	8001950 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b009      	add	sp, #36	; 0x24
 8000d2a:	bd90      	pop	{r4, r7, pc}
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	48000800 	.word	0x48000800

08000d34 <setTxData>:

/* USER CODE BEGIN 4 */

/* Configuring the MOSI line bits */
uint8_t* setTxData(uint8_t* txData, bool* testMode, bool* out0, bool* out1, bool* out2)
  {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	603b      	str	r3, [r7, #0]

    /* Test mode is the MSbit of the CW (second byte, last bit). If it is 0, mode is automatic. If 1, mode is manual. */
    if(*testMode)
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d008      	beq.n	8000d5c <setTxData+0x28>
      txData[0] |= (1u << 7);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2280      	movs	r2, #128	; 0x80
 8000d50:	4252      	negs	r2, r2
 8000d52:	4313      	orrs	r3, r2
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	701a      	strb	r2, [r3, #0]
 8000d5a:	e006      	b.n	8000d6a <setTxData+0x36>
    else
      txData[0] &= ~(1u << 7);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	227f      	movs	r2, #127	; 0x7f
 8000d62:	4013      	ands	r3, r2
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	701a      	strb	r2, [r3, #0]

    /* Configuring commands for GPO pins */
    if(*out0)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d009      	beq.n	8000d86 <setTxData+0x52>
      txData[1] |= (1u << 0);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	3301      	adds	r3, #1
 8000d76:	781a      	ldrb	r2, [r3, #0]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	701a      	strb	r2, [r3, #0]
 8000d84:	e008      	b.n	8000d98 <setTxData+0x64>
    else
      txData[1] &= ~(1u << 0);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	781a      	ldrb	r2, [r3, #0]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	2101      	movs	r1, #1
 8000d92:	438a      	bics	r2, r1
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	701a      	strb	r2, [r3, #0]

    if(*out1)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d009      	beq.n	8000db4 <setTxData+0x80>
      txData[1] |= (1u << 1);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	3301      	adds	r3, #1
 8000da4:	781a      	ldrb	r2, [r3, #0]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	3301      	adds	r3, #1
 8000daa:	2102      	movs	r1, #2
 8000dac:	430a      	orrs	r2, r1
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	701a      	strb	r2, [r3, #0]
 8000db2:	e008      	b.n	8000dc6 <setTxData+0x92>
    else
      txData[1] &= ~(1u << 1);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3301      	adds	r3, #1
 8000db8:	781a      	ldrb	r2, [r3, #0]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	2102      	movs	r1, #2
 8000dc0:	438a      	bics	r2, r1
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	701a      	strb	r2, [r3, #0]

    if(*out2)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d009      	beq.n	8000de2 <setTxData+0xae>
      txData[1] |= (1u << 2);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	781a      	ldrb	r2, [r3, #0]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	2104      	movs	r1, #4
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	701a      	strb	r2, [r3, #0]
 8000de0:	e008      	b.n	8000df4 <setTxData+0xc0>
    else
      txData[1] &= ~(1u << 2);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	3301      	adds	r3, #1
 8000de6:	781a      	ldrb	r2, [r3, #0]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3301      	adds	r3, #1
 8000dec:	2104      	movs	r1, #4
 8000dee:	438a      	bics	r2, r1
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	701a      	strb	r2, [r3, #0]

    return txData;
 8000df4:	68fb      	ldr	r3, [r7, #12]
   }
 8000df6:	0018      	movs	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b004      	add	sp, #16
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <readADC>:


/* Reading the ADC data from the MISO line, by byte pairs */
inline uint16_t* readADC(uint16_t* adcData)
  {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
     for(uint8_t i = 1; i <= adcWords; i++)
 8000e08:	230f      	movs	r3, #15
 8000e0a:	18fb      	adds	r3, r7, r3
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	e024      	b.n	8000e5c <readADC+0x5c>
         adcData[i-1] = (uint16_t)((rxData[2*i] & 0x0F) << 8 | rxData[2*i+1] );
 8000e12:	210f      	movs	r1, #15
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	4a15      	ldr	r2, [pc, #84]	; (8000e70 <readADC+0x70>)
 8000e1c:	5cd3      	ldrb	r3, [r2, r3]
 8000e1e:	021b      	lsls	r3, r3, #8
 8000e20:	b21a      	sxth	r2, r3
 8000e22:	23f0      	movs	r3, #240	; 0xf0
 8000e24:	011b      	lsls	r3, r3, #4
 8000e26:	4013      	ands	r3, r2
 8000e28:	b21a      	sxth	r2, r3
 8000e2a:	0008      	movs	r0, r1
 8000e2c:	183b      	adds	r3, r7, r0
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	3301      	adds	r3, #1
 8000e34:	490e      	ldr	r1, [pc, #56]	; (8000e70 <readADC+0x70>)
 8000e36:	5ccb      	ldrb	r3, [r1, r3]
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	b219      	sxth	r1, r3
 8000e3e:	183b      	adds	r3, r7, r0
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	4a0c      	ldr	r2, [pc, #48]	; (8000e74 <readADC+0x74>)
 8000e44:	4694      	mov	ip, r2
 8000e46:	4463      	add	r3, ip
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	18d3      	adds	r3, r2, r3
 8000e4e:	b28a      	uxth	r2, r1
 8000e50:	801a      	strh	r2, [r3, #0]
     for(uint8_t i = 1; i <= adcWords; i++)
 8000e52:	183b      	adds	r3, r7, r0
 8000e54:	781a      	ldrb	r2, [r3, #0]
 8000e56:	183b      	adds	r3, r7, r0
 8000e58:	3201      	adds	r2, #1
 8000e5a:	701a      	strb	r2, [r3, #0]
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	18fb      	adds	r3, r7, r3
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d9d5      	bls.n	8000e12 <readADC+0x12>

     return adcData;
 8000e66:	687b      	ldr	r3, [r7, #4]
  }
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b004      	add	sp, #16
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000288 	.word	0x20000288
 8000e74:	7fffffff 	.word	0x7fffffff

08000e78 <SPI_DMA_TxRx_CONFIG>:
    }
}


void SPI_DMA_TxRx_CONFIG(SPI_HandleTypeDef *hspi ,DMA_HandleTypeDef *hdma_spi_tx, DMA_HandleTypeDef *hdma_spi_rx, uint8_t* txData, uint8_t* rxData)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	603b      	str	r3, [r7, #0]

   /*---------DISABLE DMA TX AND RX CHANNELS FOR CONFIGURATION------------------- */

   /* Disable the SPI DMA receive channel, for configuration */
   hdma_spi_rx->Instance->CCR &= ~DMA_CCR_EN;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2101      	movs	r1, #1
 8000e92:	438a      	bics	r2, r1
 8000e94:	601a      	str	r2, [r3, #0]

   /* Disable the SPI DMA transmit channel, for configuration */
   hdma_spi_tx->Instance->CCR &= ~DMA_CCR_EN;
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	438a      	bics	r2, r1
 8000ea4:	601a      	str	r2, [r3, #0]

   /*---------CONFIGURE SPI DATA SIZE FOR TX AND RX------------------------------ */
   /* Configure the SPI send and receive buffer pointers and data length  */
   hspi->pTxBuffPtr = txData;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	639a      	str	r2, [r3, #56]	; 0x38
   hspi->TxXferSize = spiSize;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2212      	movs	r2, #18
 8000eb0:	879a      	strh	r2, [r3, #60]	; 0x3c
   hspi->TxXferCount = spiSize;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2212      	movs	r2, #18
 8000eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
   hspi->pRxBuffPtr = rxData;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	641a      	str	r2, [r3, #64]	; 0x40
   hspi->RxXferSize = spiSize;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2244      	movs	r2, #68	; 0x44
 8000ec2:	2112      	movs	r1, #18
 8000ec4:	5299      	strh	r1, [r3, r2]
   hspi->RxXferCount = spiSize;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2246      	movs	r2, #70	; 0x46
 8000eca:	2112      	movs	r1, #18
 8000ecc:	5299      	strh	r1, [r3, r2]

   /*---------CONFIGURE DMA CHANNEL FOR SPI DATA LENGTH, SRC AND DST ADDRESSES--- */

   /* Configure DMA SPI RX Channel data length */
   hdma_spi_rx->Instance->CNDTR = spiSize;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2212      	movs	r2, #18
 8000ed4:	605a      	str	r2, [r3, #4]

   /* Configure DMA SPI RX Channel source address */
   hdma_spi_rx->Instance->CPAR = (uint32_t)(&(hspi->Instance->DR));
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	330c      	adds	r3, #12
 8000edc:	001a      	movs	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	609a      	str	r2, [r3, #8]

   /* Configure DMA SPI RX Channel destination address */
   hdma_spi_rx->Instance->CMAR = (uint32_t)rxData;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	60da      	str	r2, [r3, #12]

   /* Configure DMA SPI TX Channel data length */
   hdma_spi_tx->Instance->CNDTR = spiSize;
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2212      	movs	r2, #18
 8000ef2:	605a      	str	r2, [r3, #4]

   /* Configure DMA SPI TX Channel source address */
   hdma_spi_tx->Instance->CMAR = (uint32_t)txData;
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	683a      	ldr	r2, [r7, #0]
 8000efa:	60da      	str	r2, [r3, #12]

   /* Configure DMA SPI TX Channel destination address */
   hdma_spi_tx->Instance->CPAR = (uint32_t)(&(hspi->Instance->DR));
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	330c      	adds	r3, #12
 8000f02:	001a      	movs	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	609a      	str	r2, [r3, #8]

   /*---------ENABLE THE DMA CHANNELS FOR SPI------------------------------------ */

   /* Enable the SPI DMA receive channel */
   hdma_spi_rx->Instance->CCR |= DMA_CCR_EN;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2101      	movs	r1, #1
 8000f16:	430a      	orrs	r2, r1
 8000f18:	601a      	str	r2, [r3, #0]

   /* Enable the SPI DMA transmit channel */
   hdma_spi_tx->Instance->CCR |= DMA_CCR_EN;
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2101      	movs	r1, #1
 8000f26:	430a      	orrs	r2, r1
 8000f28:	601a      	str	r2, [r3, #0]

   /* Enable the SPI transmit via DMA complete interrupt  */
   hdma_spi_tx->Instance->CCR |= DMA_IT_TC;
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2102      	movs	r1, #2
 8000f36:	430a      	orrs	r2, r1
 8000f38:	601a      	str	r2, [r3, #0]

   /* Set the SPI TxRx busy flag */
   hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	225d      	movs	r2, #93	; 0x5d
 8000f3e:	2105      	movs	r1, #5
 8000f40:	5499      	strb	r1, [r3, r2]

}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b004      	add	sp, #16
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <SPI_DMA_TxRx>:


void SPI_DMA_TxRx(SPI_HandleTypeDef *hspi ,DMA_HandleTypeDef *hdma_spi_tx, DMA_HandleTypeDef *hdma_spi_rx, uint8_t* txData, uint8_t* rxData)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	603b      	str	r3, [r7, #0]

/*---------------------------Config-Modified--------------------------------------*/

	   /* Disable requests for SPI transmit and receive via DMA */
	   SPI1->CR2 &= ~SPI_CR2_RXDMAEN;
 8000f5a:	4b3e      	ldr	r3, [pc, #248]	; (8001054 <SPI_DMA_TxRx+0x108>)
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	4b3d      	ldr	r3, [pc, #244]	; (8001054 <SPI_DMA_TxRx+0x108>)
 8000f60:	2101      	movs	r1, #1
 8000f62:	438a      	bics	r2, r1
 8000f64:	605a      	str	r2, [r3, #4]
	   SPI1->CR2 &= ~SPI_CR2_TXDMAEN;
 8000f66:	4b3b      	ldr	r3, [pc, #236]	; (8001054 <SPI_DMA_TxRx+0x108>)
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	4b3a      	ldr	r3, [pc, #232]	; (8001054 <SPI_DMA_TxRx+0x108>)
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	438a      	bics	r2, r1
 8000f70:	605a      	str	r2, [r3, #4]

	   /* Disable the SPI DMA receive channel, for configuration */
	   //hdma_spi_rx->Instance->CCR &= ~DMA_CCR_EN;
	   DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 8000f72:	4b39      	ldr	r3, [pc, #228]	; (8001058 <SPI_DMA_TxRx+0x10c>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4b38      	ldr	r3, [pc, #224]	; (8001058 <SPI_DMA_TxRx+0x10c>)
 8000f78:	2101      	movs	r1, #1
 8000f7a:	438a      	bics	r2, r1
 8000f7c:	601a      	str	r2, [r3, #0]

	   /* Disable the SPI DMA transmit channel, for configuration */
	   //hdma_spi_tx->Instance->CCR &= ~DMA_CCR_EN;
	   DMA1_Channel3->CCR &= ~DMA_CCR_EN;
 8000f7e:	4b37      	ldr	r3, [pc, #220]	; (800105c <SPI_DMA_TxRx+0x110>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b36      	ldr	r3, [pc, #216]	; (800105c <SPI_DMA_TxRx+0x110>)
 8000f84:	2101      	movs	r1, #1
 8000f86:	438a      	bics	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]

		/* Data update TEST */
	   for(int k = 0; k < spiSize; k++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	e009      	b.n	8000fa4 <SPI_DMA_TxRx+0x58>
		txData[k]++;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	18d3      	adds	r3, r2, r3
 8000f96:	781a      	ldrb	r2, [r3, #0]
 8000f98:	3201      	adds	r2, #1
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	701a      	strb	r2, [r3, #0]
	   for(int k = 0; k < spiSize; k++)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	2b11      	cmp	r3, #17
 8000fa8:	ddf2      	ble.n	8000f90 <SPI_DMA_TxRx+0x44>

	/*---------CONFIGURE DMA CHANNEL FOR SPI DATA LENGTH, SRC AND DST ADDRESSES--- */

	   /* Configure DMA SPI RX Channel data length */
	   //hdma_spi_rx->Instance->CNDTR = spiSize;
	   DMA1_Channel2->CNDTR = spiSize;
 8000faa:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <SPI_DMA_TxRx+0x10c>)
 8000fac:	2212      	movs	r2, #18
 8000fae:	605a      	str	r2, [r3, #4]

	   /* Configure DMA SPI TX Channel data length */
	   //hdma_spi_tx->Instance->CNDTR = spiSize;
	   DMA1_Channel3->CNDTR = spiSize;
 8000fb0:	4b2a      	ldr	r3, [pc, #168]	; (800105c <SPI_DMA_TxRx+0x110>)
 8000fb2:	2212      	movs	r2, #18
 8000fb4:	605a      	str	r2, [r3, #4]

	/*---------ENABLE THE DMA CHANNELS FOR SPI------------------------------------ */

	   /* Enable the SPI DMA receive channel */
	   //hdma_spi_rx->Instance->CCR |= DMA_CCR_EN;
	   DMA1_Channel2->CCR |= DMA_CCR_EN;
 8000fb6:	4b28      	ldr	r3, [pc, #160]	; (8001058 <SPI_DMA_TxRx+0x10c>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	4b27      	ldr	r3, [pc, #156]	; (8001058 <SPI_DMA_TxRx+0x10c>)
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]

	   /* Enable the SPI DMA transmit channel */
	   //hdma_spi_tx->Instance->CCR |= DMA_CCR_EN;
	   DMA1_Channel3->CCR |= DMA_CCR_EN;
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <SPI_DMA_TxRx+0x110>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	4b25      	ldr	r3, [pc, #148]	; (800105c <SPI_DMA_TxRx+0x110>)
 8000fc8:	2101      	movs	r1, #1
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]



	   /* Benchmarking */
	   /* Reset TIM6 counter */
	   TIM6->CNT = 0;
 8000fce:	4b24      	ldr	r3, [pc, #144]	; (8001060 <SPI_DMA_TxRx+0x114>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24

	   /* Start TIM6 counter */
	   TIM6->CR1 |= TIM_CR1_CEN;
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <SPI_DMA_TxRx+0x114>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b21      	ldr	r3, [pc, #132]	; (8001060 <SPI_DMA_TxRx+0x114>)
 8000fda:	2101      	movs	r1, #1
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	601a      	str	r2, [r3, #0]


	/* Pull NSS pin LOW */
	SPI1_SS_GPIO_Port->BRR = SPI1_SS_Pin;
 8000fe0:	4b20      	ldr	r3, [pc, #128]	; (8001064 <SPI_DMA_TxRx+0x118>)
 8000fe2:	2210      	movs	r2, #16
 8000fe4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the SPI TxRx busy flag */
    //hspi->State = HAL_SPI_STATE_BUSY_TX_RX;

	/* Enable requests for SPI transmit and receive via DMA, this actually transfers the data */
	SPI1->CR2 |= SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;  /* Transmit and receive (FULL-DUPLEX) */
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <SPI_DMA_TxRx+0x108>)
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <SPI_DMA_TxRx+0x108>)
 8000fec:	2103      	movs	r1, #3
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	605a      	str	r2, [r3, #4]

	/* Wait until DMA transfers are complete */
	while (!(DMA1->ISR & DMA_ISR_TCIF3) || !(DMA1->ISR & DMA_ISR_TCIF2)){}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <SPI_DMA_TxRx+0x11c>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d0f9      	beq.n	8000ff4 <SPI_DMA_TxRx+0xa8>
 8001000:	4b19      	ldr	r3, [pc, #100]	; (8001068 <SPI_DMA_TxRx+0x11c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2220      	movs	r2, #32
 8001006:	4013      	ands	r3, r2
 8001008:	d0f4      	beq.n	8000ff4 <SPI_DMA_TxRx+0xa8>

	/* Wait for SPI to be not busy */
	while (SPI1->SR & SPI_SR_BSY);
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <SPI_DMA_TxRx+0x108>)
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	2280      	movs	r2, #128	; 0x80
 8001012:	4013      	ands	r3, r2
 8001014:	d1fa      	bne.n	800100c <SPI_DMA_TxRx+0xc0>

	/* Call the SPI TxRx transfer complete callback function*/
	//HAL_SPI_TxRxCpltCallback(hspi);

	/* Pull NSS pin HIGH */
	SPI1_SS_GPIO_Port->BSRR = SPI1_SS_Pin;
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <SPI_DMA_TxRx+0x118>)
 8001018:	2210      	movs	r2, #16
 800101a:	619a      	str	r2, [r3, #24]


	/* Benchmarking */
	/* Stop TIM6 counter */
	TIM6->CR1 &= ~TIM_CR1_CEN;
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <SPI_DMA_TxRx+0x114>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <SPI_DMA_TxRx+0x114>)
 8001022:	2101      	movs	r1, #1
 8001024:	438a      	bics	r2, r1
 8001026:	601a      	str	r2, [r3, #0]

	/*Obtain the elapsed time*/
	elapsedTime = TIM6->CNT*0.025;
 8001028:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <SPI_DMA_TxRx+0x114>)
 800102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102c:	0018      	movs	r0, r3
 800102e:	f7ff fb63 	bl	80006f8 <__aeabi_ui2d>
 8001032:	4a0e      	ldr	r2, [pc, #56]	; (800106c <SPI_DMA_TxRx+0x120>)
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <SPI_DMA_TxRx+0x124>)
 8001036:	f7ff f8f3 	bl	8000220 <__aeabi_dmul>
 800103a:	0002      	movs	r2, r0
 800103c:	000b      	movs	r3, r1
 800103e:	0010      	movs	r0, r2
 8001040:	0019      	movs	r1, r3
 8001042:	f7ff fb7f 	bl	8000744 <__aeabi_d2f>
 8001046:	1c02      	adds	r2, r0, #0
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <SPI_DMA_TxRx+0x128>)
 800104a:	601a      	str	r2, [r3, #0]

	/* Clear the SPI TxRx busy flag */
    //hspi->State = HAL_SPI_STATE_READY;
}
 800104c:	46c0      	nop			; (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	b006      	add	sp, #24
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40013000 	.word	0x40013000
 8001058:	4002001c 	.word	0x4002001c
 800105c:	40020030 	.word	0x40020030
 8001060:	40001000 	.word	0x40001000
 8001064:	48000800 	.word	0x48000800
 8001068:	40020000 	.word	0x40020000
 800106c:	9999999a 	.word	0x9999999a
 8001070:	3f999999 	.word	0x3f999999
 8001074:	200002e0 	.word	0x200002e0

08001078 <HAL_TIM_PeriodElapsedCallback>:

/* 31.25us timer callback function, for SPI communication */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b085      	sub	sp, #20
 800107c:	af02      	add	r7, sp, #8
 800107e:	6078      	str	r0, [r7, #4]
	/* Timer 1 elapsed */
    if (htim->Instance == TIM1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a09      	ldr	r2, [pc, #36]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d10c      	bne.n	80010a4 <HAL_TIM_PeriodElapsedCallback+0x2c>

    	     /* Start TIM6 counter */
    	    // TIM6->CR1 |= TIM_CR1_CEN;

    	     /* SPI data transaction via DMA */
    	     SPI_DMA_TxRx(&hspi1 ,&hdma_spi1_tx, &hdma_spi1_rx, txData, rxData);
 800108a:	4c09      	ldr	r4, [pc, #36]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800108c:	4a09      	ldr	r2, [pc, #36]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800108e:	490a      	ldr	r1, [pc, #40]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001090:	480a      	ldr	r0, [pc, #40]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	0023      	movs	r3, r4
 8001098:	f7ff ff58 	bl	8000f4c <SPI_DMA_TxRx>

			 /* Handle received data */
			 readADC(adcData);
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800109e:	0018      	movs	r0, r3
 80010a0:	f7ff feae 	bl	8000e00 <readADC>
		    // TIM6->CR1 &= ~TIM_CR1_CEN;

		     /*Obtain the elapsed time*/
		     //elapsedTime = TIM6->CNT*0.025; /* Elapsed time for TIM6 in microseconds, DMA or SPI clock? */
         }
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b003      	add	sp, #12
 80010aa:	bd90      	pop	{r4, r7, pc}
 80010ac:	40012c00 	.word	0x40012c00
 80010b0:	20000274 	.word	0x20000274
 80010b4:	20000090 	.word	0x20000090
 80010b8:	200000d4 	.word	0x200000d4
 80010bc:	2000002c 	.word	0x2000002c
 80010c0:	20000288 	.word	0x20000288
 80010c4:	2000029c 	.word	0x2000029c

080010c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010cc:	b672      	cpsid	i
}
 80010ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <Error_Handler+0x8>
	...

080010d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_MspInit+0x44>)
 80010dc:	699a      	ldr	r2, [r3, #24]
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_MspInit+0x44>)
 80010e0:	2101      	movs	r1, #1
 80010e2:	430a      	orrs	r2, r1
 80010e4:	619a      	str	r2, [r3, #24]
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <HAL_MspInit+0x44>)
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	2201      	movs	r2, #1
 80010ec:	4013      	ands	r3, r2
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_MspInit+0x44>)
 80010f4:	69da      	ldr	r2, [r3, #28]
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_MspInit+0x44>)
 80010f8:	2180      	movs	r1, #128	; 0x80
 80010fa:	0549      	lsls	r1, r1, #21
 80010fc:	430a      	orrs	r2, r1
 80010fe:	61da      	str	r2, [r3, #28]
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <HAL_MspInit+0x44>)
 8001102:	69da      	ldr	r2, [r3, #28]
 8001104:	2380      	movs	r3, #128	; 0x80
 8001106:	055b      	lsls	r3, r3, #21
 8001108:	4013      	ands	r3, r2
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	b002      	add	sp, #8
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	40021000 	.word	0x40021000

0800111c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b08b      	sub	sp, #44	; 0x2c
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	2414      	movs	r4, #20
 8001126:	193b      	adds	r3, r7, r4
 8001128:	0018      	movs	r0, r3
 800112a:	2314      	movs	r3, #20
 800112c:	001a      	movs	r2, r3
 800112e:	2100      	movs	r1, #0
 8001130:	f002 fb80 	bl	8003834 <memset>
  if(hspi->Instance==SPI1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a44      	ldr	r2, [pc, #272]	; (800124c <HAL_SPI_MspInit+0x130>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d000      	beq.n	8001140 <HAL_SPI_MspInit+0x24>
 800113e:	e080      	b.n	8001242 <HAL_SPI_MspInit+0x126>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001140:	4b43      	ldr	r3, [pc, #268]	; (8001250 <HAL_SPI_MspInit+0x134>)
 8001142:	699a      	ldr	r2, [r3, #24]
 8001144:	4b42      	ldr	r3, [pc, #264]	; (8001250 <HAL_SPI_MspInit+0x134>)
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	0149      	lsls	r1, r1, #5
 800114a:	430a      	orrs	r2, r1
 800114c:	619a      	str	r2, [r3, #24]
 800114e:	4b40      	ldr	r3, [pc, #256]	; (8001250 <HAL_SPI_MspInit+0x134>)
 8001150:	699a      	ldr	r2, [r3, #24]
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	015b      	lsls	r3, r3, #5
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115c:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <HAL_SPI_MspInit+0x134>)
 800115e:	695a      	ldr	r2, [r3, #20]
 8001160:	4b3b      	ldr	r3, [pc, #236]	; (8001250 <HAL_SPI_MspInit+0x134>)
 8001162:	2180      	movs	r1, #128	; 0x80
 8001164:	0289      	lsls	r1, r1, #10
 8001166:	430a      	orrs	r2, r1
 8001168:	615a      	str	r2, [r3, #20]
 800116a:	4b39      	ldr	r3, [pc, #228]	; (8001250 <HAL_SPI_MspInit+0x134>)
 800116c:	695a      	ldr	r2, [r3, #20]
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	029b      	lsls	r3, r3, #10
 8001172:	4013      	ands	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001178:	0021      	movs	r1, r4
 800117a:	187b      	adds	r3, r7, r1
 800117c:	22e0      	movs	r2, #224	; 0xe0
 800117e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	187b      	adds	r3, r7, r1
 8001182:	2202      	movs	r2, #2
 8001184:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118c:	187b      	adds	r3, r7, r1
 800118e:	2203      	movs	r2, #3
 8001190:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001192:	187b      	adds	r3, r7, r1
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	187a      	adds	r2, r7, r1
 800119a:	2390      	movs	r3, #144	; 0x90
 800119c:	05db      	lsls	r3, r3, #23
 800119e:	0011      	movs	r1, r2
 80011a0:	0018      	movs	r0, r3
 80011a2:	f000 fbd5 	bl	8001950 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80011a6:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <HAL_SPI_MspInit+0x138>)
 80011a8:	4a2b      	ldr	r2, [pc, #172]	; (8001258 <HAL_SPI_MspInit+0x13c>)
 80011aa:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ac:	4b29      	ldr	r3, [pc, #164]	; (8001254 <HAL_SPI_MspInit+0x138>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b2:	4b28      	ldr	r3, [pc, #160]	; (8001254 <HAL_SPI_MspInit+0x138>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011b8:	4b26      	ldr	r3, [pc, #152]	; (8001254 <HAL_SPI_MspInit+0x138>)
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011be:	4b25      	ldr	r3, [pc, #148]	; (8001254 <HAL_SPI_MspInit+0x138>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <HAL_SPI_MspInit+0x138>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <HAL_SPI_MspInit+0x138>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80011d0:	4b20      	ldr	r3, [pc, #128]	; (8001254 <HAL_SPI_MspInit+0x138>)
 80011d2:	2280      	movs	r2, #128	; 0x80
 80011d4:	0192      	lsls	r2, r2, #6
 80011d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80011d8:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <HAL_SPI_MspInit+0x138>)
 80011da:	0018      	movs	r0, r3
 80011dc:	f000 fab2 	bl	8001744 <HAL_DMA_Init>
 80011e0:	1e03      	subs	r3, r0, #0
 80011e2:	d001      	beq.n	80011e8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80011e4:	f7ff ff70 	bl	80010c8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a1a      	ldr	r2, [pc, #104]	; (8001254 <HAL_SPI_MspInit+0x138>)
 80011ec:	659a      	str	r2, [r3, #88]	; 0x58
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <HAL_SPI_MspInit+0x138>)
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <HAL_SPI_MspInit+0x140>)
 80011f6:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <HAL_SPI_MspInit+0x144>)
 80011f8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_SPI_MspInit+0x140>)
 80011fc:	2210      	movs	r2, #16
 80011fe:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <HAL_SPI_MspInit+0x140>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_SPI_MspInit+0x140>)
 8001208:	2280      	movs	r2, #128	; 0x80
 800120a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <HAL_SPI_MspInit+0x140>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_SPI_MspInit+0x140>)
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <HAL_SPI_MspInit+0x140>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_SPI_MspInit+0x140>)
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	0192      	lsls	r2, r2, #6
 8001224:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <HAL_SPI_MspInit+0x140>)
 8001228:	0018      	movs	r0, r3
 800122a:	f000 fa8b 	bl	8001744 <HAL_DMA_Init>
 800122e:	1e03      	subs	r3, r0, #0
 8001230:	d001      	beq.n	8001236 <HAL_SPI_MspInit+0x11a>
    {
      Error_Handler();
 8001232:	f7ff ff49 	bl	80010c8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a08      	ldr	r2, [pc, #32]	; (800125c <HAL_SPI_MspInit+0x140>)
 800123a:	655a      	str	r2, [r3, #84]	; 0x54
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <HAL_SPI_MspInit+0x140>)
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	46bd      	mov	sp, r7
 8001246:	b00b      	add	sp, #44	; 0x2c
 8001248:	bd90      	pop	{r4, r7, pc}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	40013000 	.word	0x40013000
 8001250:	40021000 	.word	0x40021000
 8001254:	20000090 	.word	0x20000090
 8001258:	4002001c 	.word	0x4002001c
 800125c:	200000d4 	.word	0x200000d4
 8001260:	40020030 	.word	0x40020030

08001264 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a17      	ldr	r2, [pc, #92]	; (80012d0 <HAL_TIM_Base_MspInit+0x6c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d116      	bne.n	80012a4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_TIM_Base_MspInit+0x70>)
 8001278:	699a      	ldr	r2, [r3, #24]
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_TIM_Base_MspInit+0x70>)
 800127c:	2180      	movs	r1, #128	; 0x80
 800127e:	0109      	lsls	r1, r1, #4
 8001280:	430a      	orrs	r2, r1
 8001282:	619a      	str	r2, [r3, #24]
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_TIM_Base_MspInit+0x70>)
 8001286:	699a      	ldr	r2, [r3, #24]
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	011b      	lsls	r3, r3, #4
 800128c:	4013      	ands	r3, r2
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	200d      	movs	r0, #13
 8001298:	f000 fa22 	bl	80016e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800129c:	200d      	movs	r0, #13
 800129e:	f000 fa34 	bl	800170a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80012a2:	e010      	b.n	80012c6 <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM6)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <HAL_TIM_Base_MspInit+0x74>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d10b      	bne.n	80012c6 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_TIM_Base_MspInit+0x70>)
 80012b0:	69da      	ldr	r2, [r3, #28]
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_TIM_Base_MspInit+0x70>)
 80012b4:	2110      	movs	r1, #16
 80012b6:	430a      	orrs	r2, r1
 80012b8:	61da      	str	r2, [r3, #28]
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_TIM_Base_MspInit+0x70>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	2210      	movs	r2, #16
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b004      	add	sp, #16
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	40012c00 	.word	0x40012c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40001000 	.word	0x40001000

080012dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b08b      	sub	sp, #44	; 0x2c
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	2414      	movs	r4, #20
 80012e6:	193b      	adds	r3, r7, r4
 80012e8:	0018      	movs	r0, r3
 80012ea:	2314      	movs	r3, #20
 80012ec:	001a      	movs	r2, r3
 80012ee:	2100      	movs	r1, #0
 80012f0:	f002 faa0 	bl	8003834 <memset>
  if(huart->Instance==USART1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a33      	ldr	r2, [pc, #204]	; (80013c8 <HAL_UART_MspInit+0xec>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d160      	bne.n	80013c0 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012fe:	4b33      	ldr	r3, [pc, #204]	; (80013cc <HAL_UART_MspInit+0xf0>)
 8001300:	699a      	ldr	r2, [r3, #24]
 8001302:	4b32      	ldr	r3, [pc, #200]	; (80013cc <HAL_UART_MspInit+0xf0>)
 8001304:	2180      	movs	r1, #128	; 0x80
 8001306:	01c9      	lsls	r1, r1, #7
 8001308:	430a      	orrs	r2, r1
 800130a:	619a      	str	r2, [r3, #24]
 800130c:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <HAL_UART_MspInit+0xf0>)
 800130e:	699a      	ldr	r2, [r3, #24]
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	01db      	lsls	r3, r3, #7
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <HAL_UART_MspInit+0xf0>)
 800131c:	695a      	ldr	r2, [r3, #20]
 800131e:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <HAL_UART_MspInit+0xf0>)
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	0289      	lsls	r1, r1, #10
 8001324:	430a      	orrs	r2, r1
 8001326:	615a      	str	r2, [r3, #20]
 8001328:	4b28      	ldr	r3, [pc, #160]	; (80013cc <HAL_UART_MspInit+0xf0>)
 800132a:	695a      	ldr	r2, [r3, #20]
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	029b      	lsls	r3, r3, #10
 8001330:	4013      	ands	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001336:	193b      	adds	r3, r7, r4
 8001338:	22c0      	movs	r2, #192	; 0xc0
 800133a:	00d2      	lsls	r2, r2, #3
 800133c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	0021      	movs	r1, r4
 8001340:	187b      	adds	r3, r7, r1
 8001342:	2202      	movs	r2, #2
 8001344:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	187b      	adds	r3, r7, r1
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800134c:	187b      	adds	r3, r7, r1
 800134e:	2203      	movs	r2, #3
 8001350:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001352:	187b      	adds	r3, r7, r1
 8001354:	2201      	movs	r2, #1
 8001356:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	187a      	adds	r2, r7, r1
 800135a:	2390      	movs	r3, #144	; 0x90
 800135c:	05db      	lsls	r3, r3, #23
 800135e:	0011      	movs	r1, r2
 8001360:	0018      	movs	r0, r3
 8001362:	f000 faf5 	bl	8001950 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <HAL_UART_MspInit+0xf4>)
 8001368:	4a1a      	ldr	r2, [pc, #104]	; (80013d4 <HAL_UART_MspInit+0xf8>)
 800136a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_UART_MspInit+0xf4>)
 800136e:	2210      	movs	r2, #16
 8001370:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <HAL_UART_MspInit+0xf4>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_UART_MspInit+0xf4>)
 800137a:	2280      	movs	r2, #128	; 0x80
 800137c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <HAL_UART_MspInit+0xf4>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_UART_MspInit+0xf4>)
 8001386:	2200      	movs	r2, #0
 8001388:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_UART_MspInit+0xf4>)
 800138c:	2220      	movs	r2, #32
 800138e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <HAL_UART_MspInit+0xf4>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_UART_MspInit+0xf4>)
 8001398:	0018      	movs	r0, r3
 800139a:	f000 f9d3 	bl	8001744 <HAL_DMA_Init>
 800139e:	1e03      	subs	r3, r0, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80013a2:	f7ff fe91 	bl	80010c8 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <HAL_UART_MspInit+0xfc>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_UART_MspInit+0xfc>)
 80013ac:	2180      	movs	r1, #128	; 0x80
 80013ae:	0089      	lsls	r1, r1, #2
 80013b0:	430a      	orrs	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a06      	ldr	r2, [pc, #24]	; (80013d0 <HAL_UART_MspInit+0xf4>)
 80013b8:	671a      	str	r2, [r3, #112]	; 0x70
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_UART_MspInit+0xf4>)
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013c0:	46c0      	nop			; (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b00b      	add	sp, #44	; 0x2c
 80013c6:	bd90      	pop	{r4, r7, pc}
 80013c8:	40013800 	.word	0x40013800
 80013cc:	40021000 	.word	0x40021000
 80013d0:	20000230 	.word	0x20000230
 80013d4:	40020044 	.word	0x40020044
 80013d8:	40010000 	.word	0x40010000

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <NMI_Handler+0x4>

080013e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <HardFault_Handler+0x4>

080013e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80013ec:	46c0      	nop			; (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001400:	f000 f8a6 	bl	8001550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8001412:	0018      	movs	r0, r3
 8001414:	f000 f9de 	bl	80017d4 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <DMA1_Channel2_3_IRQHandler+0x20>)
 800141a:	0018      	movs	r0, r3
 800141c:	f000 f9da 	bl	80017d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001420:	46c0      	nop			; (mov r8, r8)
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	20000090 	.word	0x20000090
 800142c:	200000d4 	.word	0x200000d4

08001430 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <DMA1_Channel4_5_IRQHandler+0x14>)
 8001436:	0018      	movs	r0, r3
 8001438:	f000 f9cc 	bl	80017d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 800143c:	46c0      	nop			; (mov r8, r8)
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	20000230 	.word	0x20000230

08001448 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800144e:	0018      	movs	r0, r3
 8001450:	f001 fa8c 	bl	800296c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001454:	46c0      	nop			; (mov r8, r8)
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	20000118 	.word	0x20000118

08001460 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001464:	46c0      	nop			; (mov r8, r8)
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800146c:	480d      	ldr	r0, [pc, #52]	; (80014a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800146e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001470:	f7ff fff6 	bl	8001460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001476:	490d      	ldr	r1, [pc, #52]	; (80014ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001478:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <LoopForever+0xe>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800147c:	e002      	b.n	8001484 <LoopCopyDataInit>

0800147e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001482:	3304      	adds	r3, #4

08001484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001488:	d3f9      	bcc.n	800147e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800148c:	4c0a      	ldr	r4, [pc, #40]	; (80014b8 <LoopForever+0x16>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001490:	e001      	b.n	8001496 <LoopFillZerobss>

08001492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001494:	3204      	adds	r2, #4

08001496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001498:	d3fb      	bcc.n	8001492 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800149a:	f002 f9a7 	bl	80037ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800149e:	f7ff f9f7 	bl	8000890 <main>

080014a2 <LoopForever>:

LoopForever:
    b LoopForever
 80014a2:	e7fe      	b.n	80014a2 <LoopForever>
  ldr   r0, =_estack
 80014a4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80014a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014b0:	080038dc 	.word	0x080038dc
  ldr r2, =_sbss
 80014b4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014b8:	200002e8 	.word	0x200002e8

080014bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014bc:	e7fe      	b.n	80014bc <ADC1_IRQHandler>
	...

080014c0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <HAL_Init+0x24>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_Init+0x24>)
 80014ca:	2110      	movs	r1, #16
 80014cc:	430a      	orrs	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80014d0:	2003      	movs	r0, #3
 80014d2:	f000 f809 	bl	80014e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d6:	f7ff fdfd 	bl	80010d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	0018      	movs	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	40022000 	.word	0x40022000

080014e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HAL_InitTick+0x5c>)
 80014f2:	681c      	ldr	r4, [r3, #0]
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <HAL_InitTick+0x60>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	0019      	movs	r1, r3
 80014fa:	23fa      	movs	r3, #250	; 0xfa
 80014fc:	0098      	lsls	r0, r3, #2
 80014fe:	f7fe fe03 	bl	8000108 <__udivsi3>
 8001502:	0003      	movs	r3, r0
 8001504:	0019      	movs	r1, r3
 8001506:	0020      	movs	r0, r4
 8001508:	f7fe fdfe 	bl	8000108 <__udivsi3>
 800150c:	0003      	movs	r3, r0
 800150e:	0018      	movs	r0, r3
 8001510:	f000 f90b 	bl	800172a <HAL_SYSTICK_Config>
 8001514:	1e03      	subs	r3, r0, #0
 8001516:	d001      	beq.n	800151c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e00f      	b.n	800153c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b03      	cmp	r3, #3
 8001520:	d80b      	bhi.n	800153a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	2301      	movs	r3, #1
 8001526:	425b      	negs	r3, r3
 8001528:	2200      	movs	r2, #0
 800152a:	0018      	movs	r0, r3
 800152c:	f000 f8d8 	bl	80016e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_InitTick+0x64>)
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e000      	b.n	800153c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
}
 800153c:	0018      	movs	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	b003      	add	sp, #12
 8001542:	bd90      	pop	{r4, r7, pc}
 8001544:	20000004 	.word	0x20000004
 8001548:	2000000c 	.word	0x2000000c
 800154c:	20000008 	.word	0x20000008

08001550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_IncTick+0x1c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	001a      	movs	r2, r3
 800155a:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_IncTick+0x20>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	18d2      	adds	r2, r2, r3
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <HAL_IncTick+0x20>)
 8001562:	601a      	str	r2, [r3, #0]
}
 8001564:	46c0      	nop			; (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	2000000c 	.word	0x2000000c
 8001570:	200002e4 	.word	0x200002e4

08001574 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  return uwTick;
 8001578:	4b02      	ldr	r3, [pc, #8]	; (8001584 <HAL_GetTick+0x10>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	0018      	movs	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	200002e4 	.word	0x200002e4

08001588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	0002      	movs	r2, r0
 8001590:	1dfb      	adds	r3, r7, #7
 8001592:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001594:	1dfb      	adds	r3, r7, #7
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b7f      	cmp	r3, #127	; 0x7f
 800159a:	d809      	bhi.n	80015b0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159c:	1dfb      	adds	r3, r7, #7
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	001a      	movs	r2, r3
 80015a2:	231f      	movs	r3, #31
 80015a4:	401a      	ands	r2, r3
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <__NVIC_EnableIRQ+0x30>)
 80015a8:	2101      	movs	r1, #1
 80015aa:	4091      	lsls	r1, r2
 80015ac:	000a      	movs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]
  }
}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b002      	add	sp, #8
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	e000e100 	.word	0xe000e100

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	0002      	movs	r2, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015ca:	1dfb      	adds	r3, r7, #7
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b7f      	cmp	r3, #127	; 0x7f
 80015d0:	d828      	bhi.n	8001624 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d2:	4a2f      	ldr	r2, [pc, #188]	; (8001690 <__NVIC_SetPriority+0xd4>)
 80015d4:	1dfb      	adds	r3, r7, #7
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b25b      	sxtb	r3, r3
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	33c0      	adds	r3, #192	; 0xc0
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	589b      	ldr	r3, [r3, r2]
 80015e2:	1dfa      	adds	r2, r7, #7
 80015e4:	7812      	ldrb	r2, [r2, #0]
 80015e6:	0011      	movs	r1, r2
 80015e8:	2203      	movs	r2, #3
 80015ea:	400a      	ands	r2, r1
 80015ec:	00d2      	lsls	r2, r2, #3
 80015ee:	21ff      	movs	r1, #255	; 0xff
 80015f0:	4091      	lsls	r1, r2
 80015f2:	000a      	movs	r2, r1
 80015f4:	43d2      	mvns	r2, r2
 80015f6:	401a      	ands	r2, r3
 80015f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	019b      	lsls	r3, r3, #6
 80015fe:	22ff      	movs	r2, #255	; 0xff
 8001600:	401a      	ands	r2, r3
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	0018      	movs	r0, r3
 8001608:	2303      	movs	r3, #3
 800160a:	4003      	ands	r3, r0
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001610:	481f      	ldr	r0, [pc, #124]	; (8001690 <__NVIC_SetPriority+0xd4>)
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b25b      	sxtb	r3, r3
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	430a      	orrs	r2, r1
 800161c:	33c0      	adds	r3, #192	; 0xc0
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001622:	e031      	b.n	8001688 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001624:	4a1b      	ldr	r2, [pc, #108]	; (8001694 <__NVIC_SetPriority+0xd8>)
 8001626:	1dfb      	adds	r3, r7, #7
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	0019      	movs	r1, r3
 800162c:	230f      	movs	r3, #15
 800162e:	400b      	ands	r3, r1
 8001630:	3b08      	subs	r3, #8
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3306      	adds	r3, #6
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	18d3      	adds	r3, r2, r3
 800163a:	3304      	adds	r3, #4
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	1dfa      	adds	r2, r7, #7
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	0011      	movs	r1, r2
 8001644:	2203      	movs	r2, #3
 8001646:	400a      	ands	r2, r1
 8001648:	00d2      	lsls	r2, r2, #3
 800164a:	21ff      	movs	r1, #255	; 0xff
 800164c:	4091      	lsls	r1, r2
 800164e:	000a      	movs	r2, r1
 8001650:	43d2      	mvns	r2, r2
 8001652:	401a      	ands	r2, r3
 8001654:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	019b      	lsls	r3, r3, #6
 800165a:	22ff      	movs	r2, #255	; 0xff
 800165c:	401a      	ands	r2, r3
 800165e:	1dfb      	adds	r3, r7, #7
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	0018      	movs	r0, r3
 8001664:	2303      	movs	r3, #3
 8001666:	4003      	ands	r3, r0
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800166c:	4809      	ldr	r0, [pc, #36]	; (8001694 <__NVIC_SetPriority+0xd8>)
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	001c      	movs	r4, r3
 8001674:	230f      	movs	r3, #15
 8001676:	4023      	ands	r3, r4
 8001678:	3b08      	subs	r3, #8
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	430a      	orrs	r2, r1
 800167e:	3306      	adds	r3, #6
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	18c3      	adds	r3, r0, r3
 8001684:	3304      	adds	r3, #4
 8001686:	601a      	str	r2, [r3, #0]
}
 8001688:	46c0      	nop			; (mov r8, r8)
 800168a:	46bd      	mov	sp, r7
 800168c:	b003      	add	sp, #12
 800168e:	bd90      	pop	{r4, r7, pc}
 8001690:	e000e100 	.word	0xe000e100
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	1e5a      	subs	r2, r3, #1
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	045b      	lsls	r3, r3, #17
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d301      	bcc.n	80016b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ac:	2301      	movs	r3, #1
 80016ae:	e010      	b.n	80016d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b0:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <SysTick_Config+0x44>)
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	3a01      	subs	r2, #1
 80016b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b8:	2301      	movs	r3, #1
 80016ba:	425b      	negs	r3, r3
 80016bc:	2103      	movs	r1, #3
 80016be:	0018      	movs	r0, r3
 80016c0:	f7ff ff7c 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <SysTick_Config+0x44>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <SysTick_Config+0x44>)
 80016cc:	2207      	movs	r2, #7
 80016ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b002      	add	sp, #8
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	e000e010 	.word	0xe000e010

080016e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	210f      	movs	r1, #15
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	1c02      	adds	r2, r0, #0
 80016f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b25b      	sxtb	r3, r3
 80016fa:	0011      	movs	r1, r2
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7ff ff5d 	bl	80015bc <__NVIC_SetPriority>
}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	b004      	add	sp, #16
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	0002      	movs	r2, r0
 8001712:	1dfb      	adds	r3, r7, #7
 8001714:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001716:	1dfb      	adds	r3, r7, #7
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b25b      	sxtb	r3, r3
 800171c:	0018      	movs	r0, r3
 800171e:	f7ff ff33 	bl	8001588 <__NVIC_EnableIRQ>
}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	b002      	add	sp, #8
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	0018      	movs	r0, r3
 8001736:	f7ff ffaf 	bl	8001698 <SysTick_Config>
 800173a:	0003      	movs	r3, r0
}
 800173c:	0018      	movs	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	b002      	add	sp, #8
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e036      	b.n	80017c8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2221      	movs	r2, #33	; 0x21
 800175e:	2102      	movs	r1, #2
 8001760:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4a18      	ldr	r2, [pc, #96]	; (80017d0 <HAL_DMA_Init+0x8c>)
 800176e:	4013      	ands	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800177a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001786:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001792:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	4313      	orrs	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	0018      	movs	r0, r3
 80017ac:	f000 f8b4 	bl	8001918 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2221      	movs	r2, #33	; 0x21
 80017ba:	2101      	movs	r1, #1
 80017bc:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2220      	movs	r2, #32
 80017c2:	2100      	movs	r1, #0
 80017c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b004      	add	sp, #16
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	ffffc00f 	.word	0xffffc00f

080017d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	2204      	movs	r2, #4
 80017f2:	409a      	lsls	r2, r3
 80017f4:	0013      	movs	r3, r2
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	4013      	ands	r3, r2
 80017fa:	d024      	beq.n	8001846 <HAL_DMA_IRQHandler+0x72>
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2204      	movs	r2, #4
 8001800:	4013      	ands	r3, r2
 8001802:	d020      	beq.n	8001846 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2220      	movs	r2, #32
 800180c:	4013      	ands	r3, r2
 800180e:	d107      	bne.n	8001820 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2104      	movs	r1, #4
 800181c:	438a      	bics	r2, r1
 800181e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001828:	2104      	movs	r1, #4
 800182a:	4091      	lsls	r1, r2
 800182c:	000a      	movs	r2, r1
 800182e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	2b00      	cmp	r3, #0
 8001836:	d100      	bne.n	800183a <HAL_DMA_IRQHandler+0x66>
 8001838:	e06a      	b.n	8001910 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	0010      	movs	r0, r2
 8001842:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001844:	e064      	b.n	8001910 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	2202      	movs	r2, #2
 800184c:	409a      	lsls	r2, r3
 800184e:	0013      	movs	r3, r2
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	4013      	ands	r3, r2
 8001854:	d02b      	beq.n	80018ae <HAL_DMA_IRQHandler+0xda>
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	2202      	movs	r2, #2
 800185a:	4013      	ands	r3, r2
 800185c:	d027      	beq.n	80018ae <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2220      	movs	r2, #32
 8001866:	4013      	ands	r3, r2
 8001868:	d10b      	bne.n	8001882 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	210a      	movs	r1, #10
 8001876:	438a      	bics	r2, r1
 8001878:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2221      	movs	r2, #33	; 0x21
 800187e:	2101      	movs	r1, #1
 8001880:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188a:	2102      	movs	r1, #2
 800188c:	4091      	lsls	r1, r2
 800188e:	000a      	movs	r2, r1
 8001890:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2220      	movs	r2, #32
 8001896:	2100      	movs	r1, #0
 8001898:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d036      	beq.n	8001910 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	0010      	movs	r0, r2
 80018aa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80018ac:	e030      	b.n	8001910 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	2208      	movs	r2, #8
 80018b4:	409a      	lsls	r2, r3
 80018b6:	0013      	movs	r3, r2
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	4013      	ands	r3, r2
 80018bc:	d028      	beq.n	8001910 <HAL_DMA_IRQHandler+0x13c>
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2208      	movs	r2, #8
 80018c2:	4013      	ands	r3, r2
 80018c4:	d024      	beq.n	8001910 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	210e      	movs	r1, #14
 80018d2:	438a      	bics	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018de:	2101      	movs	r1, #1
 80018e0:	4091      	lsls	r1, r2
 80018e2:	000a      	movs	r2, r1
 80018e4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2221      	movs	r2, #33	; 0x21
 80018f0:	2101      	movs	r1, #1
 80018f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2220      	movs	r2, #32
 80018f8:	2100      	movs	r1, #0
 80018fa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	0010      	movs	r0, r2
 800190c:	4798      	blx	r3
    }
  }
}
 800190e:	e7ff      	b.n	8001910 <HAL_DMA_IRQHandler+0x13c>
 8001910:	46c0      	nop			; (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	b004      	add	sp, #16
 8001916:	bd80      	pop	{r7, pc}

08001918 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a08      	ldr	r2, [pc, #32]	; (8001948 <DMA_CalcBaseAndBitshift+0x30>)
 8001926:	4694      	mov	ip, r2
 8001928:	4463      	add	r3, ip
 800192a:	2114      	movs	r1, #20
 800192c:	0018      	movs	r0, r3
 800192e:	f7fe fbeb 	bl	8000108 <__udivsi3>
 8001932:	0003      	movs	r3, r0
 8001934:	009a      	lsls	r2, r3, #2
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a03      	ldr	r2, [pc, #12]	; (800194c <DMA_CalcBaseAndBitshift+0x34>)
 800193e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001940:	46c0      	nop			; (mov r8, r8)
 8001942:	46bd      	mov	sp, r7
 8001944:	b002      	add	sp, #8
 8001946:	bd80      	pop	{r7, pc}
 8001948:	bffdfff8 	.word	0xbffdfff8
 800194c:	40020000 	.word	0x40020000

08001950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195e:	e14f      	b.n	8001c00 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2101      	movs	r1, #1
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4091      	lsls	r1, r2
 800196a:	000a      	movs	r2, r1
 800196c:	4013      	ands	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d100      	bne.n	8001978 <HAL_GPIO_Init+0x28>
 8001976:	e140      	b.n	8001bfa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2203      	movs	r2, #3
 800197e:	4013      	ands	r3, r2
 8001980:	2b01      	cmp	r3, #1
 8001982:	d005      	beq.n	8001990 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2203      	movs	r2, #3
 800198a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800198c:	2b02      	cmp	r3, #2
 800198e:	d130      	bne.n	80019f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	409a      	lsls	r2, r3
 800199e:	0013      	movs	r3, r2
 80019a0:	43da      	mvns	r2, r3
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	409a      	lsls	r2, r3
 80019b2:	0013      	movs	r3, r2
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c6:	2201      	movs	r2, #1
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	409a      	lsls	r2, r3
 80019cc:	0013      	movs	r3, r2
 80019ce:	43da      	mvns	r2, r3
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	091b      	lsrs	r3, r3, #4
 80019dc:	2201      	movs	r2, #1
 80019de:	401a      	ands	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
 80019e4:	0013      	movs	r3, r2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2203      	movs	r2, #3
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d017      	beq.n	8001a2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	2203      	movs	r2, #3
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	0013      	movs	r3, r2
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	0013      	movs	r3, r2
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2203      	movs	r2, #3
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d123      	bne.n	8001a82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	08da      	lsrs	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3208      	adds	r2, #8
 8001a42:	0092      	lsls	r2, r2, #2
 8001a44:	58d3      	ldr	r3, [r2, r3]
 8001a46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2207      	movs	r2, #7
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	220f      	movs	r2, #15
 8001a52:	409a      	lsls	r2, r3
 8001a54:	0013      	movs	r3, r2
 8001a56:	43da      	mvns	r2, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	691a      	ldr	r2, [r3, #16]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	2107      	movs	r1, #7
 8001a66:	400b      	ands	r3, r1
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	0013      	movs	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	08da      	lsrs	r2, r3, #3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3208      	adds	r2, #8
 8001a7c:	0092      	lsls	r2, r2, #2
 8001a7e:	6939      	ldr	r1, [r7, #16]
 8001a80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	409a      	lsls	r2, r3
 8001a90:	0013      	movs	r3, r2
 8001a92:	43da      	mvns	r2, r3
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	401a      	ands	r2, r3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	0013      	movs	r3, r2
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	23c0      	movs	r3, #192	; 0xc0
 8001abc:	029b      	lsls	r3, r3, #10
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d100      	bne.n	8001ac4 <HAL_GPIO_Init+0x174>
 8001ac2:	e09a      	b.n	8001bfa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac4:	4b54      	ldr	r3, [pc, #336]	; (8001c18 <HAL_GPIO_Init+0x2c8>)
 8001ac6:	699a      	ldr	r2, [r3, #24]
 8001ac8:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <HAL_GPIO_Init+0x2c8>)
 8001aca:	2101      	movs	r1, #1
 8001acc:	430a      	orrs	r2, r1
 8001ace:	619a      	str	r2, [r3, #24]
 8001ad0:	4b51      	ldr	r3, [pc, #324]	; (8001c18 <HAL_GPIO_Init+0x2c8>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001adc:	4a4f      	ldr	r2, [pc, #316]	; (8001c1c <HAL_GPIO_Init+0x2cc>)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	589b      	ldr	r3, [r3, r2]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2203      	movs	r2, #3
 8001aee:	4013      	ands	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	220f      	movs	r2, #15
 8001af4:	409a      	lsls	r2, r3
 8001af6:	0013      	movs	r3, r2
 8001af8:	43da      	mvns	r2, r3
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	2390      	movs	r3, #144	; 0x90
 8001b04:	05db      	lsls	r3, r3, #23
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d013      	beq.n	8001b32 <HAL_GPIO_Init+0x1e2>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a44      	ldr	r2, [pc, #272]	; (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d00d      	beq.n	8001b2e <HAL_GPIO_Init+0x1de>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a43      	ldr	r2, [pc, #268]	; (8001c24 <HAL_GPIO_Init+0x2d4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d007      	beq.n	8001b2a <HAL_GPIO_Init+0x1da>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a42      	ldr	r2, [pc, #264]	; (8001c28 <HAL_GPIO_Init+0x2d8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d101      	bne.n	8001b26 <HAL_GPIO_Init+0x1d6>
 8001b22:	2303      	movs	r3, #3
 8001b24:	e006      	b.n	8001b34 <HAL_GPIO_Init+0x1e4>
 8001b26:	2305      	movs	r3, #5
 8001b28:	e004      	b.n	8001b34 <HAL_GPIO_Init+0x1e4>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e002      	b.n	8001b34 <HAL_GPIO_Init+0x1e4>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <HAL_GPIO_Init+0x1e4>
 8001b32:	2300      	movs	r3, #0
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	2103      	movs	r1, #3
 8001b38:	400a      	ands	r2, r1
 8001b3a:	0092      	lsls	r2, r2, #2
 8001b3c:	4093      	lsls	r3, r2
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b44:	4935      	ldr	r1, [pc, #212]	; (8001c1c <HAL_GPIO_Init+0x2cc>)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	089b      	lsrs	r3, r3, #2
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b52:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <HAL_GPIO_Init+0x2dc>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	035b      	lsls	r3, r3, #13
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b76:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <HAL_GPIO_Init+0x2dc>)
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <HAL_GPIO_Init+0x2dc>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43da      	mvns	r2, r3
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	039b      	lsls	r3, r3, #14
 8001b94:	4013      	ands	r3, r2
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ba0:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <HAL_GPIO_Init+0x2dc>)
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001ba6:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <HAL_GPIO_Init+0x2dc>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	029b      	lsls	r3, r3, #10
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bca:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <HAL_GPIO_Init+0x2dc>)
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001bd0:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <HAL_GPIO_Init+0x2dc>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	43da      	mvns	r2, r3
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	025b      	lsls	r3, r3, #9
 8001be8:	4013      	ands	r3, r2
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <HAL_GPIO_Init+0x2dc>)
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	40da      	lsrs	r2, r3
 8001c08:	1e13      	subs	r3, r2, #0
 8001c0a:	d000      	beq.n	8001c0e <HAL_GPIO_Init+0x2be>
 8001c0c:	e6a8      	b.n	8001960 <HAL_GPIO_Init+0x10>
  } 
}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	46c0      	nop			; (mov r8, r8)
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b006      	add	sp, #24
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	48000400 	.word	0x48000400
 8001c24:	48000800 	.word	0x48000800
 8001c28:	48000c00 	.word	0x48000c00
 8001c2c:	40010400 	.word	0x40010400

08001c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	0008      	movs	r0, r1
 8001c3a:	0011      	movs	r1, r2
 8001c3c:	1cbb      	adds	r3, r7, #2
 8001c3e:	1c02      	adds	r2, r0, #0
 8001c40:	801a      	strh	r2, [r3, #0]
 8001c42:	1c7b      	adds	r3, r7, #1
 8001c44:	1c0a      	adds	r2, r1, #0
 8001c46:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c48:	1c7b      	adds	r3, r7, #1
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d004      	beq.n	8001c5a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c50:	1cbb      	adds	r3, r7, #2
 8001c52:	881a      	ldrh	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c58:	e003      	b.n	8001c62 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c5a:	1cbb      	adds	r3, r7, #2
 8001c5c:	881a      	ldrh	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b002      	add	sp, #8
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e301      	b.n	8002282 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2201      	movs	r2, #1
 8001c84:	4013      	ands	r3, r2
 8001c86:	d100      	bne.n	8001c8a <HAL_RCC_OscConfig+0x1e>
 8001c88:	e08d      	b.n	8001da6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c8a:	4bc3      	ldr	r3, [pc, #780]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	220c      	movs	r2, #12
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d00e      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c96:	4bc0      	ldr	r3, [pc, #768]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d116      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x64>
 8001ca2:	4bbd      	ldr	r3, [pc, #756]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	025b      	lsls	r3, r3, #9
 8001caa:	401a      	ands	r2, r3
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	025b      	lsls	r3, r3, #9
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d10d      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb4:	4bb8      	ldr	r3, [pc, #736]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	029b      	lsls	r3, r3, #10
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d100      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x56>
 8001cc0:	e070      	b.n	8001da4 <HAL_RCC_OscConfig+0x138>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d000      	beq.n	8001ccc <HAL_RCC_OscConfig+0x60>
 8001cca:	e06b      	b.n	8001da4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e2d8      	b.n	8002282 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d107      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x7c>
 8001cd8:	4baf      	ldr	r3, [pc, #700]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4bae      	ldr	r3, [pc, #696]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001cde:	2180      	movs	r1, #128	; 0x80
 8001ce0:	0249      	lsls	r1, r1, #9
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	e02f      	b.n	8001d48 <HAL_RCC_OscConfig+0xdc>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10c      	bne.n	8001d0a <HAL_RCC_OscConfig+0x9e>
 8001cf0:	4ba9      	ldr	r3, [pc, #676]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4ba8      	ldr	r3, [pc, #672]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001cf6:	49a9      	ldr	r1, [pc, #676]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001cf8:	400a      	ands	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	4ba6      	ldr	r3, [pc, #664]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4ba5      	ldr	r3, [pc, #660]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001d02:	49a7      	ldr	r1, [pc, #668]	; (8001fa0 <HAL_RCC_OscConfig+0x334>)
 8001d04:	400a      	ands	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	e01e      	b.n	8001d48 <HAL_RCC_OscConfig+0xdc>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b05      	cmp	r3, #5
 8001d10:	d10e      	bne.n	8001d30 <HAL_RCC_OscConfig+0xc4>
 8001d12:	4ba1      	ldr	r3, [pc, #644]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4ba0      	ldr	r3, [pc, #640]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	02c9      	lsls	r1, r1, #11
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	4b9d      	ldr	r3, [pc, #628]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b9c      	ldr	r3, [pc, #624]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	0249      	lsls	r1, r1, #9
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	e00b      	b.n	8001d48 <HAL_RCC_OscConfig+0xdc>
 8001d30:	4b99      	ldr	r3, [pc, #612]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b98      	ldr	r3, [pc, #608]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001d36:	4999      	ldr	r1, [pc, #612]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d38:	400a      	ands	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	4b96      	ldr	r3, [pc, #600]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b95      	ldr	r3, [pc, #596]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001d42:	4997      	ldr	r1, [pc, #604]	; (8001fa0 <HAL_RCC_OscConfig+0x334>)
 8001d44:	400a      	ands	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d014      	beq.n	8001d7a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff fc10 	bl	8001574 <HAL_GetTick>
 8001d54:	0003      	movs	r3, r0
 8001d56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d5a:	f7ff fc0b 	bl	8001574 <HAL_GetTick>
 8001d5e:	0002      	movs	r2, r0
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b64      	cmp	r3, #100	; 0x64
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e28a      	b.n	8002282 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6c:	4b8a      	ldr	r3, [pc, #552]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	029b      	lsls	r3, r3, #10
 8001d74:	4013      	ands	r3, r2
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0xee>
 8001d78:	e015      	b.n	8001da6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7ff fbfb 	bl	8001574 <HAL_GetTick>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff fbf6 	bl	8001574 <HAL_GetTick>
 8001d88:	0002      	movs	r2, r0
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	; 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e275      	b.n	8002282 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	4b80      	ldr	r3, [pc, #512]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	029b      	lsls	r3, r3, #10
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x118>
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2202      	movs	r2, #2
 8001dac:	4013      	ands	r3, r2
 8001dae:	d100      	bne.n	8001db2 <HAL_RCC_OscConfig+0x146>
 8001db0:	e069      	b.n	8001e86 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001db2:	4b79      	ldr	r3, [pc, #484]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	220c      	movs	r2, #12
 8001db8:	4013      	ands	r3, r2
 8001dba:	d00b      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dbc:	4b76      	ldr	r3, [pc, #472]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	220c      	movs	r2, #12
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d11c      	bne.n	8001e02 <HAL_RCC_OscConfig+0x196>
 8001dc8:	4b73      	ldr	r3, [pc, #460]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	025b      	lsls	r3, r3, #9
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d116      	bne.n	8001e02 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd4:	4b70      	ldr	r3, [pc, #448]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d005      	beq.n	8001dea <HAL_RCC_OscConfig+0x17e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e24b      	b.n	8002282 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dea:	4b6b      	ldr	r3, [pc, #428]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	22f8      	movs	r2, #248	; 0xf8
 8001df0:	4393      	bics	r3, r2
 8001df2:	0019      	movs	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	00da      	lsls	r2, r3, #3
 8001dfa:	4b67      	ldr	r3, [pc, #412]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e00:	e041      	b.n	8001e86 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d024      	beq.n	8001e54 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e0a:	4b63      	ldr	r3, [pc, #396]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4b62      	ldr	r3, [pc, #392]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001e10:	2101      	movs	r1, #1
 8001e12:	430a      	orrs	r2, r1
 8001e14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7ff fbad 	bl	8001574 <HAL_GetTick>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e20:	f7ff fba8 	bl	8001574 <HAL_GetTick>
 8001e24:	0002      	movs	r2, r0
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e227      	b.n	8002282 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e32:	4b59      	ldr	r3, [pc, #356]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2202      	movs	r2, #2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d0f1      	beq.n	8001e20 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3c:	4b56      	ldr	r3, [pc, #344]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	22f8      	movs	r2, #248	; 0xf8
 8001e42:	4393      	bics	r3, r2
 8001e44:	0019      	movs	r1, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	00da      	lsls	r2, r3, #3
 8001e4c:	4b52      	ldr	r3, [pc, #328]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	e018      	b.n	8001e86 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e54:	4b50      	ldr	r3, [pc, #320]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b4f      	ldr	r3, [pc, #316]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	438a      	bics	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7ff fb88 	bl	8001574 <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7ff fb83 	bl	8001574 <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e202      	b.n	8002282 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7c:	4b46      	ldr	r3, [pc, #280]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2202      	movs	r2, #2
 8001e82:	4013      	ands	r3, r2
 8001e84:	d1f1      	bne.n	8001e6a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2208      	movs	r2, #8
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d036      	beq.n	8001efe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d019      	beq.n	8001ecc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e98:	4b3f      	ldr	r3, [pc, #252]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001e9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e9c:	4b3e      	ldr	r3, [pc, #248]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea4:	f7ff fb66 	bl	8001574 <HAL_GetTick>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eae:	f7ff fb61 	bl	8001574 <HAL_GetTick>
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e1e0      	b.n	8002282 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec0:	4b35      	ldr	r3, [pc, #212]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d0f1      	beq.n	8001eae <HAL_RCC_OscConfig+0x242>
 8001eca:	e018      	b.n	8001efe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ecc:	4b32      	ldr	r3, [pc, #200]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001ece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ed0:	4b31      	ldr	r3, [pc, #196]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	438a      	bics	r2, r1
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed8:	f7ff fb4c 	bl	8001574 <HAL_GetTick>
 8001edc:	0003      	movs	r3, r0
 8001ede:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee2:	f7ff fb47 	bl	8001574 <HAL_GetTick>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e1c6      	b.n	8002282 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef4:	4b28      	ldr	r3, [pc, #160]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	2202      	movs	r2, #2
 8001efa:	4013      	ands	r3, r2
 8001efc:	d1f1      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2204      	movs	r2, #4
 8001f04:	4013      	ands	r3, r2
 8001f06:	d100      	bne.n	8001f0a <HAL_RCC_OscConfig+0x29e>
 8001f08:	e0b4      	b.n	8002074 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0a:	201f      	movs	r0, #31
 8001f0c:	183b      	adds	r3, r7, r0
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f12:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001f14:	69da      	ldr	r2, [r3, #28]
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	055b      	lsls	r3, r3, #21
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d110      	bne.n	8001f40 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001f20:	69da      	ldr	r2, [r3, #28]
 8001f22:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001f24:	2180      	movs	r1, #128	; 0x80
 8001f26:	0549      	lsls	r1, r1, #21
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	61da      	str	r2, [r3, #28]
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001f2e:	69da      	ldr	r2, [r3, #28]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	055b      	lsls	r3, r3, #21
 8001f34:	4013      	ands	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f3a:	183b      	adds	r3, r7, r0
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f40:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <HAL_RCC_OscConfig+0x338>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d11a      	bne.n	8001f82 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f4c:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <HAL_RCC_OscConfig+0x338>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <HAL_RCC_OscConfig+0x338>)
 8001f52:	2180      	movs	r1, #128	; 0x80
 8001f54:	0049      	lsls	r1, r1, #1
 8001f56:	430a      	orrs	r2, r1
 8001f58:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5a:	f7ff fb0b 	bl	8001574 <HAL_GetTick>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f64:	f7ff fb06 	bl	8001574 <HAL_GetTick>
 8001f68:	0002      	movs	r2, r0
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e185      	b.n	8002282 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f76:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCC_OscConfig+0x338>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d10e      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x33c>
 8001f8a:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001f8c:	6a1a      	ldr	r2, [r3, #32]
 8001f8e:	4b02      	ldr	r3, [pc, #8]	; (8001f98 <HAL_RCC_OscConfig+0x32c>)
 8001f90:	2101      	movs	r1, #1
 8001f92:	430a      	orrs	r2, r1
 8001f94:	621a      	str	r2, [r3, #32]
 8001f96:	e035      	b.n	8002004 <HAL_RCC_OscConfig+0x398>
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	fffeffff 	.word	0xfffeffff
 8001fa0:	fffbffff 	.word	0xfffbffff
 8001fa4:	40007000 	.word	0x40007000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10c      	bne.n	8001fca <HAL_RCC_OscConfig+0x35e>
 8001fb0:	4bb6      	ldr	r3, [pc, #728]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8001fb2:	6a1a      	ldr	r2, [r3, #32]
 8001fb4:	4bb5      	ldr	r3, [pc, #724]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	438a      	bics	r2, r1
 8001fba:	621a      	str	r2, [r3, #32]
 8001fbc:	4bb3      	ldr	r3, [pc, #716]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8001fbe:	6a1a      	ldr	r2, [r3, #32]
 8001fc0:	4bb2      	ldr	r3, [pc, #712]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8001fc2:	2104      	movs	r1, #4
 8001fc4:	438a      	bics	r2, r1
 8001fc6:	621a      	str	r2, [r3, #32]
 8001fc8:	e01c      	b.n	8002004 <HAL_RCC_OscConfig+0x398>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2b05      	cmp	r3, #5
 8001fd0:	d10c      	bne.n	8001fec <HAL_RCC_OscConfig+0x380>
 8001fd2:	4bae      	ldr	r3, [pc, #696]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8001fd4:	6a1a      	ldr	r2, [r3, #32]
 8001fd6:	4bad      	ldr	r3, [pc, #692]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8001fd8:	2104      	movs	r1, #4
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	621a      	str	r2, [r3, #32]
 8001fde:	4bab      	ldr	r3, [pc, #684]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8001fe0:	6a1a      	ldr	r2, [r3, #32]
 8001fe2:	4baa      	ldr	r3, [pc, #680]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	621a      	str	r2, [r3, #32]
 8001fea:	e00b      	b.n	8002004 <HAL_RCC_OscConfig+0x398>
 8001fec:	4ba7      	ldr	r3, [pc, #668]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8001fee:	6a1a      	ldr	r2, [r3, #32]
 8001ff0:	4ba6      	ldr	r3, [pc, #664]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	438a      	bics	r2, r1
 8001ff6:	621a      	str	r2, [r3, #32]
 8001ff8:	4ba4      	ldr	r3, [pc, #656]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8001ffa:	6a1a      	ldr	r2, [r3, #32]
 8001ffc:	4ba3      	ldr	r3, [pc, #652]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8001ffe:	2104      	movs	r1, #4
 8002000:	438a      	bics	r2, r1
 8002002:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d014      	beq.n	8002036 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200c:	f7ff fab2 	bl	8001574 <HAL_GetTick>
 8002010:	0003      	movs	r3, r0
 8002012:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002014:	e009      	b.n	800202a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7ff faad 	bl	8001574 <HAL_GetTick>
 800201a:	0002      	movs	r2, r0
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	4a9b      	ldr	r2, [pc, #620]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e12b      	b.n	8002282 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202a:	4b98      	ldr	r3, [pc, #608]	; (800228c <HAL_RCC_OscConfig+0x620>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	2202      	movs	r2, #2
 8002030:	4013      	ands	r3, r2
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x3aa>
 8002034:	e013      	b.n	800205e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002036:	f7ff fa9d 	bl	8001574 <HAL_GetTick>
 800203a:	0003      	movs	r3, r0
 800203c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800203e:	e009      	b.n	8002054 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002040:	f7ff fa98 	bl	8001574 <HAL_GetTick>
 8002044:	0002      	movs	r2, r0
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	4a91      	ldr	r2, [pc, #580]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e116      	b.n	8002282 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002054:	4b8d      	ldr	r3, [pc, #564]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	2202      	movs	r2, #2
 800205a:	4013      	ands	r3, r2
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800205e:	231f      	movs	r3, #31
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d105      	bne.n	8002074 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002068:	4b88      	ldr	r3, [pc, #544]	; (800228c <HAL_RCC_OscConfig+0x620>)
 800206a:	69da      	ldr	r2, [r3, #28]
 800206c:	4b87      	ldr	r3, [pc, #540]	; (800228c <HAL_RCC_OscConfig+0x620>)
 800206e:	4989      	ldr	r1, [pc, #548]	; (8002294 <HAL_RCC_OscConfig+0x628>)
 8002070:	400a      	ands	r2, r1
 8002072:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2210      	movs	r2, #16
 800207a:	4013      	ands	r3, r2
 800207c:	d063      	beq.n	8002146 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d12a      	bne.n	80020dc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002086:	4b81      	ldr	r3, [pc, #516]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8002088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800208a:	4b80      	ldr	r3, [pc, #512]	; (800228c <HAL_RCC_OscConfig+0x620>)
 800208c:	2104      	movs	r1, #4
 800208e:	430a      	orrs	r2, r1
 8002090:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002092:	4b7e      	ldr	r3, [pc, #504]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8002094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002096:	4b7d      	ldr	r3, [pc, #500]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8002098:	2101      	movs	r1, #1
 800209a:	430a      	orrs	r2, r1
 800209c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209e:	f7ff fa69 	bl	8001574 <HAL_GetTick>
 80020a2:	0003      	movs	r3, r0
 80020a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020a8:	f7ff fa64 	bl	8001574 <HAL_GetTick>
 80020ac:	0002      	movs	r2, r0
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e0e3      	b.n	8002282 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020ba:	4b74      	ldr	r3, [pc, #464]	; (800228c <HAL_RCC_OscConfig+0x620>)
 80020bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020be:	2202      	movs	r2, #2
 80020c0:	4013      	ands	r3, r2
 80020c2:	d0f1      	beq.n	80020a8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020c4:	4b71      	ldr	r3, [pc, #452]	; (800228c <HAL_RCC_OscConfig+0x620>)
 80020c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c8:	22f8      	movs	r2, #248	; 0xf8
 80020ca:	4393      	bics	r3, r2
 80020cc:	0019      	movs	r1, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	00da      	lsls	r2, r3, #3
 80020d4:	4b6d      	ldr	r3, [pc, #436]	; (800228c <HAL_RCC_OscConfig+0x620>)
 80020d6:	430a      	orrs	r2, r1
 80020d8:	635a      	str	r2, [r3, #52]	; 0x34
 80020da:	e034      	b.n	8002146 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	3305      	adds	r3, #5
 80020e2:	d111      	bne.n	8002108 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80020e4:	4b69      	ldr	r3, [pc, #420]	; (800228c <HAL_RCC_OscConfig+0x620>)
 80020e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e8:	4b68      	ldr	r3, [pc, #416]	; (800228c <HAL_RCC_OscConfig+0x620>)
 80020ea:	2104      	movs	r1, #4
 80020ec:	438a      	bics	r2, r1
 80020ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020f0:	4b66      	ldr	r3, [pc, #408]	; (800228c <HAL_RCC_OscConfig+0x620>)
 80020f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f4:	22f8      	movs	r2, #248	; 0xf8
 80020f6:	4393      	bics	r3, r2
 80020f8:	0019      	movs	r1, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	00da      	lsls	r2, r3, #3
 8002100:	4b62      	ldr	r3, [pc, #392]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8002102:	430a      	orrs	r2, r1
 8002104:	635a      	str	r2, [r3, #52]	; 0x34
 8002106:	e01e      	b.n	8002146 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002108:	4b60      	ldr	r3, [pc, #384]	; (800228c <HAL_RCC_OscConfig+0x620>)
 800210a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800210c:	4b5f      	ldr	r3, [pc, #380]	; (800228c <HAL_RCC_OscConfig+0x620>)
 800210e:	2104      	movs	r1, #4
 8002110:	430a      	orrs	r2, r1
 8002112:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002114:	4b5d      	ldr	r3, [pc, #372]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8002116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002118:	4b5c      	ldr	r3, [pc, #368]	; (800228c <HAL_RCC_OscConfig+0x620>)
 800211a:	2101      	movs	r1, #1
 800211c:	438a      	bics	r2, r1
 800211e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002120:	f7ff fa28 	bl	8001574 <HAL_GetTick>
 8002124:	0003      	movs	r3, r0
 8002126:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800212a:	f7ff fa23 	bl	8001574 <HAL_GetTick>
 800212e:	0002      	movs	r2, r0
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e0a2      	b.n	8002282 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800213c:	4b53      	ldr	r3, [pc, #332]	; (800228c <HAL_RCC_OscConfig+0x620>)
 800213e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002140:	2202      	movs	r2, #2
 8002142:	4013      	ands	r3, r2
 8002144:	d1f1      	bne.n	800212a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d100      	bne.n	8002150 <HAL_RCC_OscConfig+0x4e4>
 800214e:	e097      	b.n	8002280 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002150:	4b4e      	ldr	r3, [pc, #312]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	220c      	movs	r2, #12
 8002156:	4013      	ands	r3, r2
 8002158:	2b08      	cmp	r3, #8
 800215a:	d100      	bne.n	800215e <HAL_RCC_OscConfig+0x4f2>
 800215c:	e06b      	b.n	8002236 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d14c      	bne.n	8002200 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002166:	4b49      	ldr	r3, [pc, #292]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	4b48      	ldr	r3, [pc, #288]	; (800228c <HAL_RCC_OscConfig+0x620>)
 800216c:	494a      	ldr	r1, [pc, #296]	; (8002298 <HAL_RCC_OscConfig+0x62c>)
 800216e:	400a      	ands	r2, r1
 8002170:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002172:	f7ff f9ff 	bl	8001574 <HAL_GetTick>
 8002176:	0003      	movs	r3, r0
 8002178:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217c:	f7ff f9fa 	bl	8001574 <HAL_GetTick>
 8002180:	0002      	movs	r2, r0
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e079      	b.n	8002282 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218e:	4b3f      	ldr	r3, [pc, #252]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	049b      	lsls	r3, r3, #18
 8002196:	4013      	ands	r3, r2
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800219a:	4b3c      	ldr	r3, [pc, #240]	; (800228c <HAL_RCC_OscConfig+0x620>)
 800219c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219e:	220f      	movs	r2, #15
 80021a0:	4393      	bics	r3, r2
 80021a2:	0019      	movs	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a8:	4b38      	ldr	r3, [pc, #224]	; (800228c <HAL_RCC_OscConfig+0x620>)
 80021aa:	430a      	orrs	r2, r1
 80021ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80021ae:	4b37      	ldr	r3, [pc, #220]	; (800228c <HAL_RCC_OscConfig+0x620>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	4a3a      	ldr	r2, [pc, #232]	; (800229c <HAL_RCC_OscConfig+0x630>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	0019      	movs	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	431a      	orrs	r2, r3
 80021c2:	4b32      	ldr	r3, [pc, #200]	; (800228c <HAL_RCC_OscConfig+0x620>)
 80021c4:	430a      	orrs	r2, r1
 80021c6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c8:	4b30      	ldr	r3, [pc, #192]	; (800228c <HAL_RCC_OscConfig+0x620>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b2f      	ldr	r3, [pc, #188]	; (800228c <HAL_RCC_OscConfig+0x620>)
 80021ce:	2180      	movs	r1, #128	; 0x80
 80021d0:	0449      	lsls	r1, r1, #17
 80021d2:	430a      	orrs	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7ff f9cd 	bl	8001574 <HAL_GetTick>
 80021da:	0003      	movs	r3, r0
 80021dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e0:	f7ff f9c8 	bl	8001574 <HAL_GetTick>
 80021e4:	0002      	movs	r2, r0
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e047      	b.n	8002282 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f2:	4b26      	ldr	r3, [pc, #152]	; (800228c <HAL_RCC_OscConfig+0x620>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	049b      	lsls	r3, r3, #18
 80021fa:	4013      	ands	r3, r2
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x574>
 80021fe:	e03f      	b.n	8002280 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002200:	4b22      	ldr	r3, [pc, #136]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b21      	ldr	r3, [pc, #132]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8002206:	4924      	ldr	r1, [pc, #144]	; (8002298 <HAL_RCC_OscConfig+0x62c>)
 8002208:	400a      	ands	r2, r1
 800220a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7ff f9b2 	bl	8001574 <HAL_GetTick>
 8002210:	0003      	movs	r3, r0
 8002212:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002216:	f7ff f9ad 	bl	8001574 <HAL_GetTick>
 800221a:	0002      	movs	r2, r0
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e02c      	b.n	8002282 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002228:	4b18      	ldr	r3, [pc, #96]	; (800228c <HAL_RCC_OscConfig+0x620>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	049b      	lsls	r3, r3, #18
 8002230:	4013      	ands	r3, r2
 8002232:	d1f0      	bne.n	8002216 <HAL_RCC_OscConfig+0x5aa>
 8002234:	e024      	b.n	8002280 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e01f      	b.n	8002282 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002242:	4b12      	ldr	r3, [pc, #72]	; (800228c <HAL_RCC_OscConfig+0x620>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002248:	4b10      	ldr	r3, [pc, #64]	; (800228c <HAL_RCC_OscConfig+0x620>)
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	025b      	lsls	r3, r3, #9
 8002254:	401a      	ands	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	429a      	cmp	r2, r3
 800225c:	d10e      	bne.n	800227c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	220f      	movs	r2, #15
 8002262:	401a      	ands	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002268:	429a      	cmp	r2, r3
 800226a:	d107      	bne.n	800227c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	23f0      	movs	r3, #240	; 0xf0
 8002270:	039b      	lsls	r3, r3, #14
 8002272:	401a      	ands	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	0018      	movs	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	b008      	add	sp, #32
 8002288:	bd80      	pop	{r7, pc}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	40021000 	.word	0x40021000
 8002290:	00001388 	.word	0x00001388
 8002294:	efffffff 	.word	0xefffffff
 8002298:	feffffff 	.word	0xfeffffff
 800229c:	ffc2ffff 	.word	0xffc2ffff

080022a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0b3      	b.n	800241c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022b4:	4b5b      	ldr	r3, [pc, #364]	; (8002424 <HAL_RCC_ClockConfig+0x184>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2201      	movs	r2, #1
 80022ba:	4013      	ands	r3, r2
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d911      	bls.n	80022e6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c2:	4b58      	ldr	r3, [pc, #352]	; (8002424 <HAL_RCC_ClockConfig+0x184>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2201      	movs	r2, #1
 80022c8:	4393      	bics	r3, r2
 80022ca:	0019      	movs	r1, r3
 80022cc:	4b55      	ldr	r3, [pc, #340]	; (8002424 <HAL_RCC_ClockConfig+0x184>)
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d4:	4b53      	ldr	r3, [pc, #332]	; (8002424 <HAL_RCC_ClockConfig+0x184>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2201      	movs	r2, #1
 80022da:	4013      	ands	r3, r2
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d001      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e09a      	b.n	800241c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2202      	movs	r2, #2
 80022ec:	4013      	ands	r3, r2
 80022ee:	d015      	beq.n	800231c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2204      	movs	r2, #4
 80022f6:	4013      	ands	r3, r2
 80022f8:	d006      	beq.n	8002308 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80022fa:	4b4b      	ldr	r3, [pc, #300]	; (8002428 <HAL_RCC_ClockConfig+0x188>)
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	4b4a      	ldr	r3, [pc, #296]	; (8002428 <HAL_RCC_ClockConfig+0x188>)
 8002300:	21e0      	movs	r1, #224	; 0xe0
 8002302:	00c9      	lsls	r1, r1, #3
 8002304:	430a      	orrs	r2, r1
 8002306:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002308:	4b47      	ldr	r3, [pc, #284]	; (8002428 <HAL_RCC_ClockConfig+0x188>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	22f0      	movs	r2, #240	; 0xf0
 800230e:	4393      	bics	r3, r2
 8002310:	0019      	movs	r1, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	4b44      	ldr	r3, [pc, #272]	; (8002428 <HAL_RCC_ClockConfig+0x188>)
 8002318:	430a      	orrs	r2, r1
 800231a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2201      	movs	r2, #1
 8002322:	4013      	ands	r3, r2
 8002324:	d040      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d107      	bne.n	800233e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232e:	4b3e      	ldr	r3, [pc, #248]	; (8002428 <HAL_RCC_ClockConfig+0x188>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	029b      	lsls	r3, r3, #10
 8002336:	4013      	ands	r3, r2
 8002338:	d114      	bne.n	8002364 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e06e      	b.n	800241c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d107      	bne.n	8002356 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002346:	4b38      	ldr	r3, [pc, #224]	; (8002428 <HAL_RCC_ClockConfig+0x188>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	049b      	lsls	r3, r3, #18
 800234e:	4013      	ands	r3, r2
 8002350:	d108      	bne.n	8002364 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e062      	b.n	800241c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002356:	4b34      	ldr	r3, [pc, #208]	; (8002428 <HAL_RCC_ClockConfig+0x188>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2202      	movs	r2, #2
 800235c:	4013      	ands	r3, r2
 800235e:	d101      	bne.n	8002364 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e05b      	b.n	800241c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002364:	4b30      	ldr	r3, [pc, #192]	; (8002428 <HAL_RCC_ClockConfig+0x188>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2203      	movs	r2, #3
 800236a:	4393      	bics	r3, r2
 800236c:	0019      	movs	r1, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <HAL_RCC_ClockConfig+0x188>)
 8002374:	430a      	orrs	r2, r1
 8002376:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002378:	f7ff f8fc 	bl	8001574 <HAL_GetTick>
 800237c:	0003      	movs	r3, r0
 800237e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002380:	e009      	b.n	8002396 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002382:	f7ff f8f7 	bl	8001574 <HAL_GetTick>
 8002386:	0002      	movs	r2, r0
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	4a27      	ldr	r2, [pc, #156]	; (800242c <HAL_RCC_ClockConfig+0x18c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e042      	b.n	800241c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002396:	4b24      	ldr	r3, [pc, #144]	; (8002428 <HAL_RCC_ClockConfig+0x188>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	220c      	movs	r2, #12
 800239c:	401a      	ands	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d1ec      	bne.n	8002382 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023a8:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <HAL_RCC_ClockConfig+0x184>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2201      	movs	r2, #1
 80023ae:	4013      	ands	r3, r2
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d211      	bcs.n	80023da <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b6:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <HAL_RCC_ClockConfig+0x184>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2201      	movs	r2, #1
 80023bc:	4393      	bics	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	4b18      	ldr	r3, [pc, #96]	; (8002424 <HAL_RCC_ClockConfig+0x184>)
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c8:	4b16      	ldr	r3, [pc, #88]	; (8002424 <HAL_RCC_ClockConfig+0x184>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2201      	movs	r2, #1
 80023ce:	4013      	ands	r3, r2
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d001      	beq.n	80023da <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e020      	b.n	800241c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2204      	movs	r2, #4
 80023e0:	4013      	ands	r3, r2
 80023e2:	d009      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80023e4:	4b10      	ldr	r3, [pc, #64]	; (8002428 <HAL_RCC_ClockConfig+0x188>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4a11      	ldr	r2, [pc, #68]	; (8002430 <HAL_RCC_ClockConfig+0x190>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	0019      	movs	r1, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_RCC_ClockConfig+0x188>)
 80023f4:	430a      	orrs	r2, r1
 80023f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023f8:	f000 f820 	bl	800243c <HAL_RCC_GetSysClockFreq>
 80023fc:	0001      	movs	r1, r0
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_RCC_ClockConfig+0x188>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	091b      	lsrs	r3, r3, #4
 8002404:	220f      	movs	r2, #15
 8002406:	4013      	ands	r3, r2
 8002408:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <HAL_RCC_ClockConfig+0x194>)
 800240a:	5cd3      	ldrb	r3, [r2, r3]
 800240c:	000a      	movs	r2, r1
 800240e:	40da      	lsrs	r2, r3
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_RCC_ClockConfig+0x198>)
 8002412:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002414:	2003      	movs	r0, #3
 8002416:	f7ff f867 	bl	80014e8 <HAL_InitTick>
  
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	0018      	movs	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	b004      	add	sp, #16
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40022000 	.word	0x40022000
 8002428:	40021000 	.word	0x40021000
 800242c:	00001388 	.word	0x00001388
 8002430:	fffff8ff 	.word	0xfffff8ff
 8002434:	0800389c 	.word	0x0800389c
 8002438:	20000004 	.word	0x20000004

0800243c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	2300      	movs	r3, #0
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	2300      	movs	r3, #0
 8002450:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002456:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	220c      	movs	r2, #12
 8002460:	4013      	ands	r3, r2
 8002462:	2b04      	cmp	r3, #4
 8002464:	d002      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x30>
 8002466:	2b08      	cmp	r3, #8
 8002468:	d003      	beq.n	8002472 <HAL_RCC_GetSysClockFreq+0x36>
 800246a:	e02c      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800246c:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800246e:	613b      	str	r3, [r7, #16]
      break;
 8002470:	e02c      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	0c9b      	lsrs	r3, r3, #18
 8002476:	220f      	movs	r2, #15
 8002478:	4013      	ands	r3, r2
 800247a:	4a19      	ldr	r2, [pc, #100]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800247c:	5cd3      	ldrb	r3, [r2, r3]
 800247e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002480:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	220f      	movs	r2, #15
 8002486:	4013      	ands	r3, r2
 8002488:	4a16      	ldr	r2, [pc, #88]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800248a:	5cd3      	ldrb	r3, [r2, r3]
 800248c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	025b      	lsls	r3, r3, #9
 8002494:	4013      	ands	r3, r2
 8002496:	d009      	beq.n	80024ac <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	4810      	ldr	r0, [pc, #64]	; (80024dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800249c:	f7fd fe34 	bl	8000108 <__udivsi3>
 80024a0:	0003      	movs	r3, r0
 80024a2:	001a      	movs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4353      	muls	r3, r2
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	e009      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	000a      	movs	r2, r1
 80024b0:	0152      	lsls	r2, r2, #5
 80024b2:	1a52      	subs	r2, r2, r1
 80024b4:	0193      	lsls	r3, r2, #6
 80024b6:	1a9b      	subs	r3, r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	185b      	adds	r3, r3, r1
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	613b      	str	r3, [r7, #16]
      break;
 80024c4:	e002      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024c6:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_RCC_GetSysClockFreq+0xa0>)
 80024c8:	613b      	str	r3, [r7, #16]
      break;
 80024ca:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80024cc:	693b      	ldr	r3, [r7, #16]
}
 80024ce:	0018      	movs	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b006      	add	sp, #24
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	40021000 	.word	0x40021000
 80024dc:	007a1200 	.word	0x007a1200
 80024e0:	080038b4 	.word	0x080038b4
 80024e4:	080038c4 	.word	0x080038c4

080024e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024ec:	4b02      	ldr	r3, [pc, #8]	; (80024f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80024ee:	681b      	ldr	r3, [r3, #0]
}
 80024f0:	0018      	movs	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	20000004 	.word	0x20000004

080024fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002500:	f7ff fff2 	bl	80024e8 <HAL_RCC_GetHCLKFreq>
 8002504:	0001      	movs	r1, r0
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	2207      	movs	r2, #7
 800250e:	4013      	ands	r3, r2
 8002510:	4a04      	ldr	r2, [pc, #16]	; (8002524 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002512:	5cd3      	ldrb	r3, [r2, r3]
 8002514:	40d9      	lsrs	r1, r3
 8002516:	000b      	movs	r3, r1
}    
 8002518:	0018      	movs	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	40021000 	.word	0x40021000
 8002524:	080038ac 	.word	0x080038ac

08002528 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	2380      	movs	r3, #128	; 0x80
 800253e:	025b      	lsls	r3, r3, #9
 8002540:	4013      	ands	r3, r2
 8002542:	d100      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002544:	e08e      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002546:	2017      	movs	r0, #23
 8002548:	183b      	adds	r3, r7, r0
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254e:	4b57      	ldr	r3, [pc, #348]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002550:	69da      	ldr	r2, [r3, #28]
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	055b      	lsls	r3, r3, #21
 8002556:	4013      	ands	r3, r2
 8002558:	d110      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	4b54      	ldr	r3, [pc, #336]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800255c:	69da      	ldr	r2, [r3, #28]
 800255e:	4b53      	ldr	r3, [pc, #332]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002560:	2180      	movs	r1, #128	; 0x80
 8002562:	0549      	lsls	r1, r1, #21
 8002564:	430a      	orrs	r2, r1
 8002566:	61da      	str	r2, [r3, #28]
 8002568:	4b50      	ldr	r3, [pc, #320]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800256a:	69da      	ldr	r2, [r3, #28]
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	055b      	lsls	r3, r3, #21
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002576:	183b      	adds	r3, r7, r0
 8002578:	2201      	movs	r2, #1
 800257a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257c:	4b4c      	ldr	r3, [pc, #304]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4013      	ands	r3, r2
 8002586:	d11a      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002588:	4b49      	ldr	r3, [pc, #292]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4b48      	ldr	r3, [pc, #288]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800258e:	2180      	movs	r1, #128	; 0x80
 8002590:	0049      	lsls	r1, r1, #1
 8002592:	430a      	orrs	r2, r1
 8002594:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002596:	f7fe ffed 	bl	8001574 <HAL_GetTick>
 800259a:	0003      	movs	r3, r0
 800259c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259e:	e008      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a0:	f7fe ffe8 	bl	8001574 <HAL_GetTick>
 80025a4:	0002      	movs	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e077      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b2:	4b3f      	ldr	r3, [pc, #252]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4013      	ands	r3, r2
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025be:	4b3b      	ldr	r3, [pc, #236]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025c0:	6a1a      	ldr	r2, [r3, #32]
 80025c2:	23c0      	movs	r3, #192	; 0xc0
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4013      	ands	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d034      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	23c0      	movs	r3, #192	; 0xc0
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4013      	ands	r3, r2
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d02c      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025e0:	4b32      	ldr	r3, [pc, #200]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	4a33      	ldr	r2, [pc, #204]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025ea:	4b30      	ldr	r3, [pc, #192]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025ec:	6a1a      	ldr	r2, [r3, #32]
 80025ee:	4b2f      	ldr	r3, [pc, #188]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025f0:	2180      	movs	r1, #128	; 0x80
 80025f2:	0249      	lsls	r1, r1, #9
 80025f4:	430a      	orrs	r2, r1
 80025f6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025f8:	4b2c      	ldr	r3, [pc, #176]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025fa:	6a1a      	ldr	r2, [r3, #32]
 80025fc:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025fe:	492e      	ldr	r1, [pc, #184]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002600:	400a      	ands	r2, r1
 8002602:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002604:	4b29      	ldr	r3, [pc, #164]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2201      	movs	r2, #1
 800260e:	4013      	ands	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002612:	f7fe ffaf 	bl	8001574 <HAL_GetTick>
 8002616:	0003      	movs	r3, r0
 8002618:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261a:	e009      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261c:	f7fe ffaa 	bl	8001574 <HAL_GetTick>
 8002620:	0002      	movs	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	4a25      	ldr	r2, [pc, #148]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d901      	bls.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e038      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002630:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	2202      	movs	r2, #2
 8002636:	4013      	ands	r3, r2
 8002638:	d0f0      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800263a:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	4a1d      	ldr	r2, [pc, #116]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002640:	4013      	ands	r3, r2
 8002642:	0019      	movs	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	4b18      	ldr	r3, [pc, #96]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800264a:	430a      	orrs	r2, r1
 800264c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800264e:	2317      	movs	r3, #23
 8002650:	18fb      	adds	r3, r7, r3
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d105      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002658:	4b14      	ldr	r3, [pc, #80]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800265a:	69da      	ldr	r2, [r3, #28]
 800265c:	4b13      	ldr	r3, [pc, #76]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800265e:	4918      	ldr	r1, [pc, #96]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002660:	400a      	ands	r2, r1
 8002662:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2201      	movs	r2, #1
 800266a:	4013      	ands	r3, r2
 800266c:	d009      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800266e:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	2203      	movs	r2, #3
 8002674:	4393      	bics	r3, r2
 8002676:	0019      	movs	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800267e:	430a      	orrs	r2, r1
 8002680:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2220      	movs	r2, #32
 8002688:	4013      	ands	r3, r2
 800268a:	d009      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800268c:	4b07      	ldr	r3, [pc, #28]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	2210      	movs	r2, #16
 8002692:	4393      	bics	r3, r2
 8002694:	0019      	movs	r1, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	4b04      	ldr	r3, [pc, #16]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800269c:	430a      	orrs	r2, r1
 800269e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	0018      	movs	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b006      	add	sp, #24
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40007000 	.word	0x40007000
 80026b4:	fffffcff 	.word	0xfffffcff
 80026b8:	fffeffff 	.word	0xfffeffff
 80026bc:	00001388 	.word	0x00001388
 80026c0:	efffffff 	.word	0xefffffff

080026c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e0a8      	b.n	8002828 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d109      	bne.n	80026f2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	2382      	movs	r3, #130	; 0x82
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d009      	beq.n	80026fe <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	61da      	str	r2, [r3, #28]
 80026f0:	e005      	b.n	80026fe <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	225d      	movs	r2, #93	; 0x5d
 8002708:	5c9b      	ldrb	r3, [r3, r2]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d107      	bne.n	8002720 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	225c      	movs	r2, #92	; 0x5c
 8002714:	2100      	movs	r1, #0
 8002716:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	0018      	movs	r0, r3
 800271c:	f7fe fcfe 	bl	800111c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	225d      	movs	r2, #93	; 0x5d
 8002724:	2102      	movs	r1, #2
 8002726:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2140      	movs	r1, #64	; 0x40
 8002734:	438a      	bics	r2, r1
 8002736:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	23e0      	movs	r3, #224	; 0xe0
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	429a      	cmp	r2, r3
 8002742:	d902      	bls.n	800274a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	e002      	b.n	8002750 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800274a:	2380      	movs	r3, #128	; 0x80
 800274c:	015b      	lsls	r3, r3, #5
 800274e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	23f0      	movs	r3, #240	; 0xf0
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	429a      	cmp	r2, r3
 800275a:	d008      	beq.n	800276e <HAL_SPI_Init+0xaa>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	23e0      	movs	r3, #224	; 0xe0
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	429a      	cmp	r2, r3
 8002766:	d002      	beq.n	800276e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	2382      	movs	r3, #130	; 0x82
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	401a      	ands	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6899      	ldr	r1, [r3, #8]
 800277c:	2384      	movs	r3, #132	; 0x84
 800277e:	021b      	lsls	r3, r3, #8
 8002780:	400b      	ands	r3, r1
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	2102      	movs	r1, #2
 800278a:	400b      	ands	r3, r1
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	2101      	movs	r1, #1
 8002794:	400b      	ands	r3, r1
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6999      	ldr	r1, [r3, #24]
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	400b      	ands	r3, r1
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	2138      	movs	r1, #56	; 0x38
 80027aa:	400b      	ands	r3, r1
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	2180      	movs	r1, #128	; 0x80
 80027b4:	400b      	ands	r3, r1
 80027b6:	431a      	orrs	r2, r3
 80027b8:	0011      	movs	r1, r2
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	019b      	lsls	r3, r3, #6
 80027c2:	401a      	ands	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	0c1b      	lsrs	r3, r3, #16
 80027d2:	2204      	movs	r2, #4
 80027d4:	401a      	ands	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	2110      	movs	r1, #16
 80027dc:	400b      	ands	r3, r1
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e4:	2108      	movs	r1, #8
 80027e6:	400b      	ands	r3, r1
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68d9      	ldr	r1, [r3, #12]
 80027ee:	23f0      	movs	r3, #240	; 0xf0
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	400b      	ands	r3, r1
 80027f4:	431a      	orrs	r2, r3
 80027f6:	0011      	movs	r1, r2
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	2380      	movs	r3, #128	; 0x80
 80027fc:	015b      	lsls	r3, r3, #5
 80027fe:	401a      	ands	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69da      	ldr	r2, [r3, #28]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4907      	ldr	r1, [pc, #28]	; (8002830 <HAL_SPI_Init+0x16c>)
 8002814:	400a      	ands	r2, r1
 8002816:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	225d      	movs	r2, #93	; 0x5d
 8002822:	2101      	movs	r1, #1
 8002824:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	0018      	movs	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	b004      	add	sp, #16
 800282e:	bd80      	pop	{r7, pc}
 8002830:	fffff7ff 	.word	0xfffff7ff

08002834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e042      	b.n	80028cc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	223d      	movs	r2, #61	; 0x3d
 800284a:	5c9b      	ldrb	r3, [r3, r2]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d107      	bne.n	8002862 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	223c      	movs	r2, #60	; 0x3c
 8002856:	2100      	movs	r1, #0
 8002858:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	0018      	movs	r0, r3
 800285e:	f7fe fd01 	bl	8001264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	223d      	movs	r2, #61	; 0x3d
 8002866:	2102      	movs	r1, #2
 8002868:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3304      	adds	r3, #4
 8002872:	0019      	movs	r1, r3
 8002874:	0010      	movs	r0, r2
 8002876:	f000 fa83 	bl	8002d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2246      	movs	r2, #70	; 0x46
 800287e:	2101      	movs	r1, #1
 8002880:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	223e      	movs	r2, #62	; 0x3e
 8002886:	2101      	movs	r1, #1
 8002888:	5499      	strb	r1, [r3, r2]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	223f      	movs	r2, #63	; 0x3f
 800288e:	2101      	movs	r1, #1
 8002890:	5499      	strb	r1, [r3, r2]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2240      	movs	r2, #64	; 0x40
 8002896:	2101      	movs	r1, #1
 8002898:	5499      	strb	r1, [r3, r2]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2241      	movs	r2, #65	; 0x41
 800289e:	2101      	movs	r1, #1
 80028a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2242      	movs	r2, #66	; 0x42
 80028a6:	2101      	movs	r1, #1
 80028a8:	5499      	strb	r1, [r3, r2]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2243      	movs	r2, #67	; 0x43
 80028ae:	2101      	movs	r1, #1
 80028b0:	5499      	strb	r1, [r3, r2]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2244      	movs	r2, #68	; 0x44
 80028b6:	2101      	movs	r1, #1
 80028b8:	5499      	strb	r1, [r3, r2]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2245      	movs	r2, #69	; 0x45
 80028be:	2101      	movs	r1, #1
 80028c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	223d      	movs	r2, #61	; 0x3d
 80028c6:	2101      	movs	r1, #1
 80028c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	0018      	movs	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b002      	add	sp, #8
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	223d      	movs	r2, #61	; 0x3d
 80028e0:	5c9b      	ldrb	r3, [r3, r2]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d001      	beq.n	80028ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e035      	b.n	8002958 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	223d      	movs	r2, #61	; 0x3d
 80028f0:	2102      	movs	r1, #2
 80028f2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2101      	movs	r1, #1
 8002900:	430a      	orrs	r2, r1
 8002902:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a15      	ldr	r2, [pc, #84]	; (8002960 <HAL_TIM_Base_Start_IT+0x8c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d009      	beq.n	8002922 <HAL_TIM_Base_Start_IT+0x4e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a14      	ldr	r2, [pc, #80]	; (8002964 <HAL_TIM_Base_Start_IT+0x90>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d004      	beq.n	8002922 <HAL_TIM_Base_Start_IT+0x4e>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a12      	ldr	r2, [pc, #72]	; (8002968 <HAL_TIM_Base_Start_IT+0x94>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d111      	bne.n	8002946 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2207      	movs	r2, #7
 800292a:	4013      	ands	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b06      	cmp	r3, #6
 8002932:	d010      	beq.n	8002956 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2101      	movs	r1, #1
 8002940:	430a      	orrs	r2, r1
 8002942:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002944:	e007      	b.n	8002956 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2101      	movs	r1, #1
 8002952:	430a      	orrs	r2, r1
 8002954:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	0018      	movs	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	b004      	add	sp, #16
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40012c00 	.word	0x40012c00
 8002964:	40000400 	.word	0x40000400
 8002968:	40014000 	.word	0x40014000

0800296c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2202      	movs	r2, #2
 800297c:	4013      	ands	r3, r2
 800297e:	2b02      	cmp	r3, #2
 8002980:	d124      	bne.n	80029cc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	2202      	movs	r2, #2
 800298a:	4013      	ands	r3, r2
 800298c:	2b02      	cmp	r3, #2
 800298e:	d11d      	bne.n	80029cc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2203      	movs	r2, #3
 8002996:	4252      	negs	r2, r2
 8002998:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2203      	movs	r2, #3
 80029a8:	4013      	ands	r3, r2
 80029aa:	d004      	beq.n	80029b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	0018      	movs	r0, r3
 80029b0:	f000 f9ce 	bl	8002d50 <HAL_TIM_IC_CaptureCallback>
 80029b4:	e007      	b.n	80029c6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f000 f9c1 	bl	8002d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	0018      	movs	r0, r3
 80029c2:	f000 f9cd 	bl	8002d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	2204      	movs	r2, #4
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d125      	bne.n	8002a26 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2204      	movs	r2, #4
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d11e      	bne.n	8002a26 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2205      	movs	r2, #5
 80029ee:	4252      	negs	r2, r2
 80029f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2202      	movs	r2, #2
 80029f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	23c0      	movs	r3, #192	; 0xc0
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4013      	ands	r3, r2
 8002a04:	d004      	beq.n	8002a10 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f000 f9a1 	bl	8002d50 <HAL_TIM_IC_CaptureCallback>
 8002a0e:	e007      	b.n	8002a20 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	0018      	movs	r0, r3
 8002a14:	f000 f994 	bl	8002d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f000 f9a0 	bl	8002d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d124      	bne.n	8002a7e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	2208      	movs	r2, #8
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d11d      	bne.n	8002a7e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2209      	movs	r2, #9
 8002a48:	4252      	negs	r2, r2
 8002a4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2204      	movs	r2, #4
 8002a50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	2203      	movs	r2, #3
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d004      	beq.n	8002a68 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	0018      	movs	r0, r3
 8002a62:	f000 f975 	bl	8002d50 <HAL_TIM_IC_CaptureCallback>
 8002a66:	e007      	b.n	8002a78 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f000 f968 	bl	8002d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	0018      	movs	r0, r3
 8002a74:	f000 f974 	bl	8002d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	2210      	movs	r2, #16
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b10      	cmp	r3, #16
 8002a8a:	d125      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	2210      	movs	r2, #16
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b10      	cmp	r3, #16
 8002a98:	d11e      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2211      	movs	r2, #17
 8002aa0:	4252      	negs	r2, r2
 8002aa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	69da      	ldr	r2, [r3, #28]
 8002ab0:	23c0      	movs	r3, #192	; 0xc0
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d004      	beq.n	8002ac2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	0018      	movs	r0, r3
 8002abc:	f000 f948 	bl	8002d50 <HAL_TIM_IC_CaptureCallback>
 8002ac0:	e007      	b.n	8002ad2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f000 f93b 	bl	8002d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	0018      	movs	r0, r3
 8002ace:	f000 f947 	bl	8002d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d10f      	bne.n	8002b06 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	2201      	movs	r2, #1
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d108      	bne.n	8002b06 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2202      	movs	r2, #2
 8002afa:	4252      	negs	r2, r2
 8002afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	0018      	movs	r0, r3
 8002b02:	f7fe fab9 	bl	8001078 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	2280      	movs	r2, #128	; 0x80
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b80      	cmp	r3, #128	; 0x80
 8002b12:	d10f      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2280      	movs	r2, #128	; 0x80
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b80      	cmp	r3, #128	; 0x80
 8002b20:	d108      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2281      	movs	r2, #129	; 0x81
 8002b28:	4252      	negs	r2, r2
 8002b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f000 fa96 	bl	8003060 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	2240      	movs	r2, #64	; 0x40
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b40      	cmp	r3, #64	; 0x40
 8002b40:	d10f      	bne.n	8002b62 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	2240      	movs	r2, #64	; 0x40
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b40      	cmp	r3, #64	; 0x40
 8002b4e:	d108      	bne.n	8002b62 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2241      	movs	r2, #65	; 0x41
 8002b56:	4252      	negs	r2, r2
 8002b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f000 f907 	bl	8002d70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b20      	cmp	r3, #32
 8002b6e:	d10f      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b20      	cmp	r3, #32
 8002b7c:	d108      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2221      	movs	r2, #33	; 0x21
 8002b84:	4252      	negs	r2, r2
 8002b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f000 fa60 	bl	8003050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b90:	46c0      	nop			; (mov r8, r8)
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b002      	add	sp, #8
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba2:	230f      	movs	r3, #15
 8002ba4:	18fb      	adds	r3, r7, r3
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	223c      	movs	r2, #60	; 0x3c
 8002bae:	5c9b      	ldrb	r3, [r3, r2]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_TIM_ConfigClockSource+0x20>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e0bc      	b.n	8002d32 <HAL_TIM_ConfigClockSource+0x19a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	223c      	movs	r2, #60	; 0x3c
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	223d      	movs	r2, #61	; 0x3d
 8002bc4:	2102      	movs	r1, #2
 8002bc6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2277      	movs	r2, #119	; 0x77
 8002bd4:	4393      	bics	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	4a58      	ldr	r2, [pc, #352]	; (8002d3c <HAL_TIM_ConfigClockSource+0x1a4>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2280      	movs	r2, #128	; 0x80
 8002bee:	0192      	lsls	r2, r2, #6
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d040      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0xde>
 8002bf4:	2280      	movs	r2, #128	; 0x80
 8002bf6:	0192      	lsls	r2, r2, #6
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d900      	bls.n	8002bfe <HAL_TIM_ConfigClockSource+0x66>
 8002bfc:	e088      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x178>
 8002bfe:	2280      	movs	r2, #128	; 0x80
 8002c00:	0152      	lsls	r2, r2, #5
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d100      	bne.n	8002c08 <HAL_TIM_ConfigClockSource+0x70>
 8002c06:	e088      	b.n	8002d1a <HAL_TIM_ConfigClockSource+0x182>
 8002c08:	2280      	movs	r2, #128	; 0x80
 8002c0a:	0152      	lsls	r2, r2, #5
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d900      	bls.n	8002c12 <HAL_TIM_ConfigClockSource+0x7a>
 8002c10:	e07e      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x178>
 8002c12:	2b70      	cmp	r3, #112	; 0x70
 8002c14:	d018      	beq.n	8002c48 <HAL_TIM_ConfigClockSource+0xb0>
 8002c16:	d900      	bls.n	8002c1a <HAL_TIM_ConfigClockSource+0x82>
 8002c18:	e07a      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x178>
 8002c1a:	2b60      	cmp	r3, #96	; 0x60
 8002c1c:	d04f      	beq.n	8002cbe <HAL_TIM_ConfigClockSource+0x126>
 8002c1e:	d900      	bls.n	8002c22 <HAL_TIM_ConfigClockSource+0x8a>
 8002c20:	e076      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x178>
 8002c22:	2b50      	cmp	r3, #80	; 0x50
 8002c24:	d03b      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x106>
 8002c26:	d900      	bls.n	8002c2a <HAL_TIM_ConfigClockSource+0x92>
 8002c28:	e072      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x178>
 8002c2a:	2b40      	cmp	r3, #64	; 0x40
 8002c2c:	d057      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0x146>
 8002c2e:	d900      	bls.n	8002c32 <HAL_TIM_ConfigClockSource+0x9a>
 8002c30:	e06e      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x178>
 8002c32:	2b30      	cmp	r3, #48	; 0x30
 8002c34:	d063      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0x166>
 8002c36:	d86b      	bhi.n	8002d10 <HAL_TIM_ConfigClockSource+0x178>
 8002c38:	2b20      	cmp	r3, #32
 8002c3a:	d060      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0x166>
 8002c3c:	d868      	bhi.n	8002d10 <HAL_TIM_ConfigClockSource+0x178>
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d05d      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0x166>
 8002c42:	2b10      	cmp	r3, #16
 8002c44:	d05b      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0x166>
 8002c46:	e063      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	6899      	ldr	r1, [r3, #8]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f000 f982 	bl	8002f60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2277      	movs	r2, #119	; 0x77
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	609a      	str	r2, [r3, #8]
      break;
 8002c74:	e052      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6899      	ldr	r1, [r3, #8]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f000 f96b 	bl	8002f60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2180      	movs	r1, #128	; 0x80
 8002c96:	01c9      	lsls	r1, r1, #7
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	609a      	str	r2, [r3, #8]
      break;
 8002c9c:	e03e      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6818      	ldr	r0, [r3, #0]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	6859      	ldr	r1, [r3, #4]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	001a      	movs	r2, r3
 8002cac:	f000 f8de 	bl	8002e6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2150      	movs	r1, #80	; 0x50
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f000 f938 	bl	8002f2c <TIM_ITRx_SetConfig>
      break;
 8002cbc:	e02e      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6818      	ldr	r0, [r3, #0]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	6859      	ldr	r1, [r3, #4]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	001a      	movs	r2, r3
 8002ccc:	f000 f8fc 	bl	8002ec8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2160      	movs	r1, #96	; 0x60
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f000 f928 	bl	8002f2c <TIM_ITRx_SetConfig>
      break;
 8002cdc:	e01e      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6859      	ldr	r1, [r3, #4]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	001a      	movs	r2, r3
 8002cec:	f000 f8be 	bl	8002e6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2140      	movs	r1, #64	; 0x40
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f000 f918 	bl	8002f2c <TIM_ITRx_SetConfig>
      break;
 8002cfc:	e00e      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	0019      	movs	r1, r3
 8002d08:	0010      	movs	r0, r2
 8002d0a:	f000 f90f 	bl	8002f2c <TIM_ITRx_SetConfig>
      break;
 8002d0e:	e005      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002d10:	230f      	movs	r3, #15
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
      break;
 8002d18:	e000      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002d1a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	223d      	movs	r2, #61	; 0x3d
 8002d20:	2101      	movs	r1, #1
 8002d22:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	223c      	movs	r2, #60	; 0x3c
 8002d28:	2100      	movs	r1, #0
 8002d2a:	5499      	strb	r1, [r3, r2]

  return status;
 8002d2c:	230f      	movs	r3, #15
 8002d2e:	18fb      	adds	r3, r7, r3
 8002d30:	781b      	ldrb	r3, [r3, #0]
}
 8002d32:	0018      	movs	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b004      	add	sp, #16
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	ffff00ff 	.word	0xffff00ff

08002d40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b002      	add	sp, #8
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d58:	46c0      	nop			; (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b002      	add	sp, #8
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b002      	add	sp, #8
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b002      	add	sp, #8
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a2f      	ldr	r2, [pc, #188]	; (8002e50 <TIM_Base_SetConfig+0xd0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d003      	beq.n	8002da0 <TIM_Base_SetConfig+0x20>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a2e      	ldr	r2, [pc, #184]	; (8002e54 <TIM_Base_SetConfig+0xd4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d108      	bne.n	8002db2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2270      	movs	r2, #112	; 0x70
 8002da4:	4393      	bics	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a26      	ldr	r2, [pc, #152]	; (8002e50 <TIM_Base_SetConfig+0xd0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d013      	beq.n	8002de2 <TIM_Base_SetConfig+0x62>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a25      	ldr	r2, [pc, #148]	; (8002e54 <TIM_Base_SetConfig+0xd4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00f      	beq.n	8002de2 <TIM_Base_SetConfig+0x62>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a24      	ldr	r2, [pc, #144]	; (8002e58 <TIM_Base_SetConfig+0xd8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00b      	beq.n	8002de2 <TIM_Base_SetConfig+0x62>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a23      	ldr	r2, [pc, #140]	; (8002e5c <TIM_Base_SetConfig+0xdc>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d007      	beq.n	8002de2 <TIM_Base_SetConfig+0x62>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a22      	ldr	r2, [pc, #136]	; (8002e60 <TIM_Base_SetConfig+0xe0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d003      	beq.n	8002de2 <TIM_Base_SetConfig+0x62>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a21      	ldr	r2, [pc, #132]	; (8002e64 <TIM_Base_SetConfig+0xe4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d108      	bne.n	8002df4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4a20      	ldr	r2, [pc, #128]	; (8002e68 <TIM_Base_SetConfig+0xe8>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2280      	movs	r2, #128	; 0x80
 8002df8:	4393      	bics	r3, r2
 8002dfa:	001a      	movs	r2, r3
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a0c      	ldr	r2, [pc, #48]	; (8002e50 <TIM_Base_SetConfig+0xd0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d00b      	beq.n	8002e3a <TIM_Base_SetConfig+0xba>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a0d      	ldr	r2, [pc, #52]	; (8002e5c <TIM_Base_SetConfig+0xdc>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d007      	beq.n	8002e3a <TIM_Base_SetConfig+0xba>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a0c      	ldr	r2, [pc, #48]	; (8002e60 <TIM_Base_SetConfig+0xe0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d003      	beq.n	8002e3a <TIM_Base_SetConfig+0xba>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <TIM_Base_SetConfig+0xe4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d103      	bne.n	8002e42 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	615a      	str	r2, [r3, #20]
}
 8002e48:	46c0      	nop			; (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b004      	add	sp, #16
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40012c00 	.word	0x40012c00
 8002e54:	40000400 	.word	0x40000400
 8002e58:	40002000 	.word	0x40002000
 8002e5c:	40014000 	.word	0x40014000
 8002e60:	40014400 	.word	0x40014400
 8002e64:	40014800 	.word	0x40014800
 8002e68:	fffffcff 	.word	0xfffffcff

08002e6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	2201      	movs	r2, #1
 8002e84:	4393      	bics	r3, r2
 8002e86:	001a      	movs	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	22f0      	movs	r2, #240	; 0xf0
 8002e96:	4393      	bics	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	220a      	movs	r2, #10
 8002ea8:	4393      	bics	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	621a      	str	r2, [r3, #32]
}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b006      	add	sp, #24
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	2210      	movs	r2, #16
 8002eda:	4393      	bics	r3, r2
 8002edc:	001a      	movs	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	4a0d      	ldr	r2, [pc, #52]	; (8002f28 <TIM_TI2_ConfigInputStage+0x60>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	031b      	lsls	r3, r3, #12
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	22a0      	movs	r2, #160	; 0xa0
 8002f04:	4393      	bics	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	621a      	str	r2, [r3, #32]
}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	46bd      	mov	sp, r7
 8002f22:	b006      	add	sp, #24
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	ffff0fff 	.word	0xffff0fff

08002f2c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2270      	movs	r2, #112	; 0x70
 8002f40:	4393      	bics	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	2207      	movs	r2, #7
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	609a      	str	r2, [r3, #8]
}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b004      	add	sp, #16
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	4a09      	ldr	r2, [pc, #36]	; (8002f9c <TIM_ETR_SetConfig+0x3c>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	021a      	lsls	r2, r3, #8
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	609a      	str	r2, [r3, #8]
}
 8002f94:	46c0      	nop			; (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b006      	add	sp, #24
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	ffff00ff 	.word	0xffff00ff

08002fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	223c      	movs	r2, #60	; 0x3c
 8002fae:	5c9b      	ldrb	r3, [r3, r2]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e041      	b.n	800303c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	223c      	movs	r2, #60	; 0x3c
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	223d      	movs	r2, #61	; 0x3d
 8002fc4:	2102      	movs	r1, #2
 8002fc6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2270      	movs	r2, #112	; 0x70
 8002fdc:	4393      	bics	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a13      	ldr	r2, [pc, #76]	; (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d009      	beq.n	8003010 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a11      	ldr	r2, [pc, #68]	; (8003048 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d004      	beq.n	8003010 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a10      	ldr	r2, [pc, #64]	; (800304c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d10c      	bne.n	800302a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	2280      	movs	r2, #128	; 0x80
 8003014:	4393      	bics	r3, r2
 8003016:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	4313      	orrs	r3, r2
 8003020:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	223d      	movs	r2, #61	; 0x3d
 800302e:	2101      	movs	r1, #1
 8003030:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	223c      	movs	r2, #60	; 0x3c
 8003036:	2100      	movs	r1, #0
 8003038:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b004      	add	sp, #16
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40012c00 	.word	0x40012c00
 8003048:	40000400 	.word	0x40000400
 800304c:	40014000 	.word	0x40014000

08003050 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003058:	46c0      	nop			; (mov r8, r8)
 800305a:	46bd      	mov	sp, r7
 800305c:	b002      	add	sp, #8
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003068:	46c0      	nop			; (mov r8, r8)
 800306a:	46bd      	mov	sp, r7
 800306c:	b002      	add	sp, #8
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e044      	b.n	800310c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d107      	bne.n	800309a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2278      	movs	r2, #120	; 0x78
 800308e:	2100      	movs	r1, #0
 8003090:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	0018      	movs	r0, r3
 8003096:	f7fe f921 	bl	80012dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2224      	movs	r2, #36	; 0x24
 800309e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2101      	movs	r1, #1
 80030ac:	438a      	bics	r2, r1
 80030ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	0018      	movs	r0, r3
 80030b4:	f000 f830 	bl	8003118 <UART_SetConfig>
 80030b8:	0003      	movs	r3, r0
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e024      	b.n	800310c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	0018      	movs	r0, r3
 80030ce:	f000 f963 	bl	8003398 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	490d      	ldr	r1, [pc, #52]	; (8003114 <HAL_UART_Init+0xa4>)
 80030de:	400a      	ands	r2, r1
 80030e0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2108      	movs	r1, #8
 80030ee:	438a      	bics	r2, r1
 80030f0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2101      	movs	r1, #1
 80030fe:	430a      	orrs	r2, r1
 8003100:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	0018      	movs	r0, r3
 8003106:	f000 f9fb 	bl	8003500 <UART_CheckIdleState>
 800310a:	0003      	movs	r3, r0
}
 800310c:	0018      	movs	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	b002      	add	sp, #8
 8003112:	bd80      	pop	{r7, pc}
 8003114:	fffff7ff 	.word	0xfffff7ff

08003118 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003120:	231e      	movs	r3, #30
 8003122:	18fb      	adds	r3, r7, r3
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a8d      	ldr	r2, [pc, #564]	; (800337c <UART_SetConfig+0x264>)
 8003148:	4013      	ands	r3, r2
 800314a:	0019      	movs	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	430a      	orrs	r2, r1
 8003154:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4a88      	ldr	r2, [pc, #544]	; (8003380 <UART_SetConfig+0x268>)
 800315e:	4013      	ands	r3, r2
 8003160:	0019      	movs	r1, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4a7f      	ldr	r2, [pc, #508]	; (8003384 <UART_SetConfig+0x26c>)
 8003186:	4013      	ands	r3, r2
 8003188:	0019      	movs	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	430a      	orrs	r2, r1
 8003192:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a7b      	ldr	r2, [pc, #492]	; (8003388 <UART_SetConfig+0x270>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d127      	bne.n	80031ee <UART_SetConfig+0xd6>
 800319e:	4b7b      	ldr	r3, [pc, #492]	; (800338c <UART_SetConfig+0x274>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	2203      	movs	r2, #3
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d00d      	beq.n	80031c6 <UART_SetConfig+0xae>
 80031aa:	d81b      	bhi.n	80031e4 <UART_SetConfig+0xcc>
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d014      	beq.n	80031da <UART_SetConfig+0xc2>
 80031b0:	d818      	bhi.n	80031e4 <UART_SetConfig+0xcc>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <UART_SetConfig+0xa4>
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d00a      	beq.n	80031d0 <UART_SetConfig+0xb8>
 80031ba:	e013      	b.n	80031e4 <UART_SetConfig+0xcc>
 80031bc:	231f      	movs	r3, #31
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
 80031c4:	e021      	b.n	800320a <UART_SetConfig+0xf2>
 80031c6:	231f      	movs	r3, #31
 80031c8:	18fb      	adds	r3, r7, r3
 80031ca:	2202      	movs	r2, #2
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	e01c      	b.n	800320a <UART_SetConfig+0xf2>
 80031d0:	231f      	movs	r3, #31
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	2204      	movs	r2, #4
 80031d6:	701a      	strb	r2, [r3, #0]
 80031d8:	e017      	b.n	800320a <UART_SetConfig+0xf2>
 80031da:	231f      	movs	r3, #31
 80031dc:	18fb      	adds	r3, r7, r3
 80031de:	2208      	movs	r2, #8
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	e012      	b.n	800320a <UART_SetConfig+0xf2>
 80031e4:	231f      	movs	r3, #31
 80031e6:	18fb      	adds	r3, r7, r3
 80031e8:	2210      	movs	r2, #16
 80031ea:	701a      	strb	r2, [r3, #0]
 80031ec:	e00d      	b.n	800320a <UART_SetConfig+0xf2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a67      	ldr	r2, [pc, #412]	; (8003390 <UART_SetConfig+0x278>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d104      	bne.n	8003202 <UART_SetConfig+0xea>
 80031f8:	231f      	movs	r3, #31
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]
 8003200:	e003      	b.n	800320a <UART_SetConfig+0xf2>
 8003202:	231f      	movs	r3, #31
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	2210      	movs	r2, #16
 8003208:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69da      	ldr	r2, [r3, #28]
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	429a      	cmp	r2, r3
 8003214:	d15c      	bne.n	80032d0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003216:	231f      	movs	r3, #31
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b08      	cmp	r3, #8
 800321e:	d015      	beq.n	800324c <UART_SetConfig+0x134>
 8003220:	dc18      	bgt.n	8003254 <UART_SetConfig+0x13c>
 8003222:	2b04      	cmp	r3, #4
 8003224:	d00d      	beq.n	8003242 <UART_SetConfig+0x12a>
 8003226:	dc15      	bgt.n	8003254 <UART_SetConfig+0x13c>
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <UART_SetConfig+0x11a>
 800322c:	2b02      	cmp	r3, #2
 800322e:	d005      	beq.n	800323c <UART_SetConfig+0x124>
 8003230:	e010      	b.n	8003254 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003232:	f7ff f963 	bl	80024fc <HAL_RCC_GetPCLK1Freq>
 8003236:	0003      	movs	r3, r0
 8003238:	61bb      	str	r3, [r7, #24]
        break;
 800323a:	e012      	b.n	8003262 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800323c:	4b55      	ldr	r3, [pc, #340]	; (8003394 <UART_SetConfig+0x27c>)
 800323e:	61bb      	str	r3, [r7, #24]
        break;
 8003240:	e00f      	b.n	8003262 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003242:	f7ff f8fb 	bl	800243c <HAL_RCC_GetSysClockFreq>
 8003246:	0003      	movs	r3, r0
 8003248:	61bb      	str	r3, [r7, #24]
        break;
 800324a:	e00a      	b.n	8003262 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	61bb      	str	r3, [r7, #24]
        break;
 8003252:	e006      	b.n	8003262 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003258:	231e      	movs	r3, #30
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
        break;
 8003260:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d100      	bne.n	800326a <UART_SetConfig+0x152>
 8003268:	e07a      	b.n	8003360 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	005a      	lsls	r2, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	18d2      	adds	r2, r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	0019      	movs	r1, r3
 800327c:	0010      	movs	r0, r2
 800327e:	f7fc ff43 	bl	8000108 <__udivsi3>
 8003282:	0003      	movs	r3, r0
 8003284:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b0f      	cmp	r3, #15
 800328a:	d91c      	bls.n	80032c6 <UART_SetConfig+0x1ae>
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	025b      	lsls	r3, r3, #9
 8003292:	429a      	cmp	r2, r3
 8003294:	d217      	bcs.n	80032c6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	b29a      	uxth	r2, r3
 800329a:	200e      	movs	r0, #14
 800329c:	183b      	adds	r3, r7, r0
 800329e:	210f      	movs	r1, #15
 80032a0:	438a      	bics	r2, r1
 80032a2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	085b      	lsrs	r3, r3, #1
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2207      	movs	r2, #7
 80032ac:	4013      	ands	r3, r2
 80032ae:	b299      	uxth	r1, r3
 80032b0:	183b      	adds	r3, r7, r0
 80032b2:	183a      	adds	r2, r7, r0
 80032b4:	8812      	ldrh	r2, [r2, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	183a      	adds	r2, r7, r0
 80032c0:	8812      	ldrh	r2, [r2, #0]
 80032c2:	60da      	str	r2, [r3, #12]
 80032c4:	e04c      	b.n	8003360 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80032c6:	231e      	movs	r3, #30
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	2201      	movs	r2, #1
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	e047      	b.n	8003360 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032d0:	231f      	movs	r3, #31
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d015      	beq.n	8003306 <UART_SetConfig+0x1ee>
 80032da:	dc18      	bgt.n	800330e <UART_SetConfig+0x1f6>
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d00d      	beq.n	80032fc <UART_SetConfig+0x1e4>
 80032e0:	dc15      	bgt.n	800330e <UART_SetConfig+0x1f6>
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <UART_SetConfig+0x1d4>
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d005      	beq.n	80032f6 <UART_SetConfig+0x1de>
 80032ea:	e010      	b.n	800330e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ec:	f7ff f906 	bl	80024fc <HAL_RCC_GetPCLK1Freq>
 80032f0:	0003      	movs	r3, r0
 80032f2:	61bb      	str	r3, [r7, #24]
        break;
 80032f4:	e012      	b.n	800331c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032f6:	4b27      	ldr	r3, [pc, #156]	; (8003394 <UART_SetConfig+0x27c>)
 80032f8:	61bb      	str	r3, [r7, #24]
        break;
 80032fa:	e00f      	b.n	800331c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032fc:	f7ff f89e 	bl	800243c <HAL_RCC_GetSysClockFreq>
 8003300:	0003      	movs	r3, r0
 8003302:	61bb      	str	r3, [r7, #24]
        break;
 8003304:	e00a      	b.n	800331c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003306:	2380      	movs	r3, #128	; 0x80
 8003308:	021b      	lsls	r3, r3, #8
 800330a:	61bb      	str	r3, [r7, #24]
        break;
 800330c:	e006      	b.n	800331c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003312:	231e      	movs	r3, #30
 8003314:	18fb      	adds	r3, r7, r3
 8003316:	2201      	movs	r2, #1
 8003318:	701a      	strb	r2, [r3, #0]
        break;
 800331a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d01e      	beq.n	8003360 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	085a      	lsrs	r2, r3, #1
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	18d2      	adds	r2, r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	0019      	movs	r1, r3
 8003332:	0010      	movs	r0, r2
 8003334:	f7fc fee8 	bl	8000108 <__udivsi3>
 8003338:	0003      	movs	r3, r0
 800333a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2b0f      	cmp	r3, #15
 8003340:	d90a      	bls.n	8003358 <UART_SetConfig+0x240>
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	025b      	lsls	r3, r3, #9
 8003348:	429a      	cmp	r2, r3
 800334a:	d205      	bcs.n	8003358 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	b29a      	uxth	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	e003      	b.n	8003360 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003358:	231e      	movs	r3, #30
 800335a:	18fb      	adds	r3, r7, r3
 800335c:	2201      	movs	r2, #1
 800335e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800336c:	231e      	movs	r3, #30
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	781b      	ldrb	r3, [r3, #0]
}
 8003372:	0018      	movs	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	b008      	add	sp, #32
 8003378:	bd80      	pop	{r7, pc}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	ffff69f3 	.word	0xffff69f3
 8003380:	ffffcfff 	.word	0xffffcfff
 8003384:	fffff4ff 	.word	0xfffff4ff
 8003388:	40013800 	.word	0x40013800
 800338c:	40021000 	.word	0x40021000
 8003390:	40004400 	.word	0x40004400
 8003394:	007a1200 	.word	0x007a1200

08003398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	2201      	movs	r2, #1
 80033a6:	4013      	ands	r3, r2
 80033a8:	d00b      	beq.n	80033c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4a4a      	ldr	r2, [pc, #296]	; (80034dc <UART_AdvFeatureConfig+0x144>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	0019      	movs	r1, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	2202      	movs	r2, #2
 80033c8:	4013      	ands	r3, r2
 80033ca:	d00b      	beq.n	80033e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4a43      	ldr	r2, [pc, #268]	; (80034e0 <UART_AdvFeatureConfig+0x148>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	0019      	movs	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	2204      	movs	r2, #4
 80033ea:	4013      	ands	r3, r2
 80033ec:	d00b      	beq.n	8003406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4a3b      	ldr	r2, [pc, #236]	; (80034e4 <UART_AdvFeatureConfig+0x14c>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	0019      	movs	r1, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	2208      	movs	r2, #8
 800340c:	4013      	ands	r3, r2
 800340e:	d00b      	beq.n	8003428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4a34      	ldr	r2, [pc, #208]	; (80034e8 <UART_AdvFeatureConfig+0x150>)
 8003418:	4013      	ands	r3, r2
 800341a:	0019      	movs	r1, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	2210      	movs	r2, #16
 800342e:	4013      	ands	r3, r2
 8003430:	d00b      	beq.n	800344a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	4a2c      	ldr	r2, [pc, #176]	; (80034ec <UART_AdvFeatureConfig+0x154>)
 800343a:	4013      	ands	r3, r2
 800343c:	0019      	movs	r1, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	2220      	movs	r2, #32
 8003450:	4013      	ands	r3, r2
 8003452:	d00b      	beq.n	800346c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	4a25      	ldr	r2, [pc, #148]	; (80034f0 <UART_AdvFeatureConfig+0x158>)
 800345c:	4013      	ands	r3, r2
 800345e:	0019      	movs	r1, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	2240      	movs	r2, #64	; 0x40
 8003472:	4013      	ands	r3, r2
 8003474:	d01d      	beq.n	80034b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <UART_AdvFeatureConfig+0x15c>)
 800347e:	4013      	ands	r3, r2
 8003480:	0019      	movs	r1, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003492:	2380      	movs	r3, #128	; 0x80
 8003494:	035b      	lsls	r3, r3, #13
 8003496:	429a      	cmp	r2, r3
 8003498:	d10b      	bne.n	80034b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4a15      	ldr	r2, [pc, #84]	; (80034f8 <UART_AdvFeatureConfig+0x160>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	0019      	movs	r1, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	2280      	movs	r2, #128	; 0x80
 80034b8:	4013      	ands	r3, r2
 80034ba:	d00b      	beq.n	80034d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	4a0e      	ldr	r2, [pc, #56]	; (80034fc <UART_AdvFeatureConfig+0x164>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	0019      	movs	r1, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	605a      	str	r2, [r3, #4]
  }
}
 80034d4:	46c0      	nop			; (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b002      	add	sp, #8
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	fffdffff 	.word	0xfffdffff
 80034e0:	fffeffff 	.word	0xfffeffff
 80034e4:	fffbffff 	.word	0xfffbffff
 80034e8:	ffff7fff 	.word	0xffff7fff
 80034ec:	ffffefff 	.word	0xffffefff
 80034f0:	ffffdfff 	.word	0xffffdfff
 80034f4:	ffefffff 	.word	0xffefffff
 80034f8:	ff9fffff 	.word	0xff9fffff
 80034fc:	fff7ffff 	.word	0xfff7ffff

08003500 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b092      	sub	sp, #72	; 0x48
 8003504:	af02      	add	r7, sp, #8
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2284      	movs	r2, #132	; 0x84
 800350c:	2100      	movs	r1, #0
 800350e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003510:	f7fe f830 	bl	8001574 <HAL_GetTick>
 8003514:	0003      	movs	r3, r0
 8003516:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2208      	movs	r2, #8
 8003520:	4013      	ands	r3, r2
 8003522:	2b08      	cmp	r3, #8
 8003524:	d12c      	bne.n	8003580 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003528:	2280      	movs	r2, #128	; 0x80
 800352a:	0391      	lsls	r1, r2, #14
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4a46      	ldr	r2, [pc, #280]	; (8003648 <UART_CheckIdleState+0x148>)
 8003530:	9200      	str	r2, [sp, #0]
 8003532:	2200      	movs	r2, #0
 8003534:	f000 f88c 	bl	8003650 <UART_WaitOnFlagUntilTimeout>
 8003538:	1e03      	subs	r3, r0, #0
 800353a:	d021      	beq.n	8003580 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800353c:	f3ef 8310 	mrs	r3, PRIMASK
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003544:	63bb      	str	r3, [r7, #56]	; 0x38
 8003546:	2301      	movs	r3, #1
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354c:	f383 8810 	msr	PRIMASK, r3
}
 8003550:	46c0      	nop			; (mov r8, r8)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2180      	movs	r1, #128	; 0x80
 800355e:	438a      	bics	r2, r1
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003564:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003568:	f383 8810 	msr	PRIMASK, r3
}
 800356c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2278      	movs	r2, #120	; 0x78
 8003578:	2100      	movs	r1, #0
 800357a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e05f      	b.n	8003640 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2204      	movs	r2, #4
 8003588:	4013      	ands	r3, r2
 800358a:	2b04      	cmp	r3, #4
 800358c:	d146      	bne.n	800361c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800358e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003590:	2280      	movs	r2, #128	; 0x80
 8003592:	03d1      	lsls	r1, r2, #15
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	4a2c      	ldr	r2, [pc, #176]	; (8003648 <UART_CheckIdleState+0x148>)
 8003598:	9200      	str	r2, [sp, #0]
 800359a:	2200      	movs	r2, #0
 800359c:	f000 f858 	bl	8003650 <UART_WaitOnFlagUntilTimeout>
 80035a0:	1e03      	subs	r3, r0, #0
 80035a2:	d03b      	beq.n	800361c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a4:	f3ef 8310 	mrs	r3, PRIMASK
 80035a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80035aa:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ac:	637b      	str	r3, [r7, #52]	; 0x34
 80035ae:	2301      	movs	r3, #1
 80035b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f383 8810 	msr	PRIMASK, r3
}
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4921      	ldr	r1, [pc, #132]	; (800364c <UART_CheckIdleState+0x14c>)
 80035c6:	400a      	ands	r2, r1
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f383 8810 	msr	PRIMASK, r3
}
 80035d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d6:	f3ef 8310 	mrs	r3, PRIMASK
 80035da:	61bb      	str	r3, [r7, #24]
  return(result);
 80035dc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035de:	633b      	str	r3, [r7, #48]	; 0x30
 80035e0:	2301      	movs	r3, #1
 80035e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f383 8810 	msr	PRIMASK, r3
}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2101      	movs	r1, #1
 80035f8:	438a      	bics	r2, r1
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	f383 8810 	msr	PRIMASK, r3
}
 8003606:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2280      	movs	r2, #128	; 0x80
 800360c:	2120      	movs	r1, #32
 800360e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2278      	movs	r2, #120	; 0x78
 8003614:	2100      	movs	r1, #0
 8003616:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e011      	b.n	8003640 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2280      	movs	r2, #128	; 0x80
 8003626:	2120      	movs	r1, #32
 8003628:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2278      	movs	r2, #120	; 0x78
 800363a:	2100      	movs	r1, #0
 800363c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	0018      	movs	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	b010      	add	sp, #64	; 0x40
 8003646:	bd80      	pop	{r7, pc}
 8003648:	01ffffff 	.word	0x01ffffff
 800364c:	fffffedf 	.word	0xfffffedf

08003650 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	1dfb      	adds	r3, r7, #7
 800365e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003660:	e04b      	b.n	80036fa <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	3301      	adds	r3, #1
 8003666:	d048      	beq.n	80036fa <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003668:	f7fd ff84 	bl	8001574 <HAL_GetTick>
 800366c:	0002      	movs	r2, r0
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	429a      	cmp	r2, r3
 8003676:	d302      	bcc.n	800367e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e04b      	b.n	800371a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2204      	movs	r2, #4
 800368a:	4013      	ands	r3, r2
 800368c:	d035      	beq.n	80036fa <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	2208      	movs	r2, #8
 8003696:	4013      	ands	r3, r2
 8003698:	2b08      	cmp	r3, #8
 800369a:	d111      	bne.n	80036c0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2208      	movs	r2, #8
 80036a2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	0018      	movs	r0, r3
 80036a8:	f000 f83c 	bl	8003724 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2284      	movs	r2, #132	; 0x84
 80036b0:	2108      	movs	r1, #8
 80036b2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2278      	movs	r2, #120	; 0x78
 80036b8:	2100      	movs	r1, #0
 80036ba:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e02c      	b.n	800371a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69da      	ldr	r2, [r3, #28]
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	401a      	ands	r2, r3
 80036cc:	2380      	movs	r3, #128	; 0x80
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d112      	bne.n	80036fa <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2280      	movs	r2, #128	; 0x80
 80036da:	0112      	lsls	r2, r2, #4
 80036dc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	0018      	movs	r0, r3
 80036e2:	f000 f81f 	bl	8003724 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2284      	movs	r2, #132	; 0x84
 80036ea:	2120      	movs	r1, #32
 80036ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2278      	movs	r2, #120	; 0x78
 80036f2:	2100      	movs	r1, #0
 80036f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e00f      	b.n	800371a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	4013      	ands	r3, r2
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	425a      	negs	r2, r3
 800370a:	4153      	adcs	r3, r2
 800370c:	b2db      	uxtb	r3, r3
 800370e:	001a      	movs	r2, r3
 8003710:	1dfb      	adds	r3, r7, #7
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d0a4      	beq.n	8003662 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	0018      	movs	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	b004      	add	sp, #16
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b08e      	sub	sp, #56	; 0x38
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800372c:	f3ef 8310 	mrs	r3, PRIMASK
 8003730:	617b      	str	r3, [r7, #20]
  return(result);
 8003732:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003734:	637b      	str	r3, [r7, #52]	; 0x34
 8003736:	2301      	movs	r3, #1
 8003738:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	f383 8810 	msr	PRIMASK, r3
}
 8003740:	46c0      	nop			; (mov r8, r8)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4926      	ldr	r1, [pc, #152]	; (80037e8 <UART_EndRxTransfer+0xc4>)
 800374e:	400a      	ands	r2, r1
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003754:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f383 8810 	msr	PRIMASK, r3
}
 800375c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800375e:	f3ef 8310 	mrs	r3, PRIMASK
 8003762:	623b      	str	r3, [r7, #32]
  return(result);
 8003764:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003766:	633b      	str	r3, [r7, #48]	; 0x30
 8003768:	2301      	movs	r3, #1
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	f383 8810 	msr	PRIMASK, r3
}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2101      	movs	r1, #1
 8003780:	438a      	bics	r2, r1
 8003782:	609a      	str	r2, [r3, #8]
 8003784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003786:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378a:	f383 8810 	msr	PRIMASK, r3
}
 800378e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003794:	2b01      	cmp	r3, #1
 8003796:	d118      	bne.n	80037ca <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003798:	f3ef 8310 	mrs	r3, PRIMASK
 800379c:	60bb      	str	r3, [r7, #8]
  return(result);
 800379e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a2:	2301      	movs	r3, #1
 80037a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f383 8810 	msr	PRIMASK, r3
}
 80037ac:	46c0      	nop			; (mov r8, r8)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2110      	movs	r1, #16
 80037ba:	438a      	bics	r2, r1
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f383 8810 	msr	PRIMASK, r3
}
 80037c8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2280      	movs	r2, #128	; 0x80
 80037ce:	2120      	movs	r1, #32
 80037d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b00e      	add	sp, #56	; 0x38
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	fffffedf 	.word	0xfffffedf

080037ec <__libc_init_array>:
 80037ec:	b570      	push	{r4, r5, r6, lr}
 80037ee:	2600      	movs	r6, #0
 80037f0:	4d0c      	ldr	r5, [pc, #48]	; (8003824 <__libc_init_array+0x38>)
 80037f2:	4c0d      	ldr	r4, [pc, #52]	; (8003828 <__libc_init_array+0x3c>)
 80037f4:	1b64      	subs	r4, r4, r5
 80037f6:	10a4      	asrs	r4, r4, #2
 80037f8:	42a6      	cmp	r6, r4
 80037fa:	d109      	bne.n	8003810 <__libc_init_array+0x24>
 80037fc:	2600      	movs	r6, #0
 80037fe:	f000 f821 	bl	8003844 <_init>
 8003802:	4d0a      	ldr	r5, [pc, #40]	; (800382c <__libc_init_array+0x40>)
 8003804:	4c0a      	ldr	r4, [pc, #40]	; (8003830 <__libc_init_array+0x44>)
 8003806:	1b64      	subs	r4, r4, r5
 8003808:	10a4      	asrs	r4, r4, #2
 800380a:	42a6      	cmp	r6, r4
 800380c:	d105      	bne.n	800381a <__libc_init_array+0x2e>
 800380e:	bd70      	pop	{r4, r5, r6, pc}
 8003810:	00b3      	lsls	r3, r6, #2
 8003812:	58eb      	ldr	r3, [r5, r3]
 8003814:	4798      	blx	r3
 8003816:	3601      	adds	r6, #1
 8003818:	e7ee      	b.n	80037f8 <__libc_init_array+0xc>
 800381a:	00b3      	lsls	r3, r6, #2
 800381c:	58eb      	ldr	r3, [r5, r3]
 800381e:	4798      	blx	r3
 8003820:	3601      	adds	r6, #1
 8003822:	e7f2      	b.n	800380a <__libc_init_array+0x1e>
 8003824:	080038d4 	.word	0x080038d4
 8003828:	080038d4 	.word	0x080038d4
 800382c:	080038d4 	.word	0x080038d4
 8003830:	080038d8 	.word	0x080038d8

08003834 <memset>:
 8003834:	0003      	movs	r3, r0
 8003836:	1882      	adds	r2, r0, r2
 8003838:	4293      	cmp	r3, r2
 800383a:	d100      	bne.n	800383e <memset+0xa>
 800383c:	4770      	bx	lr
 800383e:	7019      	strb	r1, [r3, #0]
 8003840:	3301      	adds	r3, #1
 8003842:	e7f9      	b.n	8003838 <memset+0x4>

08003844 <_init>:
 8003844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384a:	bc08      	pop	{r3}
 800384c:	469e      	mov	lr, r3
 800384e:	4770      	bx	lr

08003850 <_fini>:
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003856:	bc08      	pop	{r3}
 8003858:	469e      	mov	lr, r3
 800385a:	4770      	bx	lr
